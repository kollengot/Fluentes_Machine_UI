[{"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/index.js":"1","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/reportWebVitals.js":"2","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Login.js":"3","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Dashboard.js":"4","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Constants.js":"5","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Quote.js":"6","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteList.js":"7","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteDetail.js":"8","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Routes.js":"9","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/AdminDashboard.js":"10","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInventory.js":"11","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditInventory.js":"12","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageOperations.js":"13","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditOperations.js":"14","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Utils.js":"15","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageWorker.js":"16","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditWorker.js":"17","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageProjects.js":"18","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditProject.js":"19","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageCustomer.js":"20","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditCustomer.js":"21","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInspections.js":"22","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/auth.service.js":"23","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/admin.service.js":"24","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/user.service.js":"25","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditQuote.js":"26","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageQuote.js":"27","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/MyAlert.js":"28","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Popup.js":"29","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Sidebar.js":"30","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerDashboard.js":"31","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerOperations.js":"32","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerProjects.js":"33","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerTimesheet.js":"34","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Checkbox.js":"35","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableRow.js":"36","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableHeader.js":"37","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/worker.service.js":"38","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/SubHeader.js":"39","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/OperationList.js":"40","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/ForgotPassword.js":"41","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/ConfigureOperation.js":"42","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Profile.js":"43","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Header.js":"44","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Footer.js":"45","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableListHeader.js":"46"},{"size":410,"mtime":1630695188461,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1611647184538,"results":"49","hashOfConfig":"48"},{"size":5512,"mtime":1635877131790,"results":"50","hashOfConfig":"48"},{"size":3260,"mtime":1642633710816,"results":"51","hashOfConfig":"48"},{"size":815,"mtime":1642635264930,"results":"52","hashOfConfig":"48"},{"size":12764,"mtime":1642627617731,"results":"53","hashOfConfig":"48"},{"size":4997,"mtime":1642627560196,"results":"54","hashOfConfig":"48"},{"size":23439,"mtime":1642627769701,"results":"55","hashOfConfig":"48"},{"size":1216,"mtime":1625797895746,"results":"56","hashOfConfig":"48"},{"size":2679,"mtime":1642633690416,"results":"57","hashOfConfig":"48"},{"size":9101,"mtime":1637173797253,"results":"58","hashOfConfig":"48"},{"size":8854,"mtime":1642637444548,"results":"59","hashOfConfig":"48"},{"size":8845,"mtime":1633825510209,"results":"60","hashOfConfig":"48"},{"size":12510,"mtime":1642637501134,"results":"61","hashOfConfig":"48"},{"size":1032,"mtime":1631596646493,"results":"62","hashOfConfig":"48"},{"size":9037,"mtime":1634244436657,"results":"63","hashOfConfig":"48"},{"size":9960,"mtime":1636006390872,"results":"64","hashOfConfig":"48"},{"size":9680,"mtime":1633825363023,"results":"65","hashOfConfig":"48"},{"size":12867,"mtime":1635906027003,"results":"66","hashOfConfig":"48"},{"size":8701,"mtime":1642637625204,"results":"67","hashOfConfig":"48"},{"size":7104,"mtime":1642637411456,"results":"68","hashOfConfig":"48"},{"size":12194,"mtime":1642637596275,"results":"69","hashOfConfig":"48"},{"size":2731,"mtime":1634679741406,"results":"70","hashOfConfig":"48"},{"size":12980,"mtime":1642636939729,"results":"71","hashOfConfig":"48"},{"size":3532,"mtime":1642636900425,"results":"72","hashOfConfig":"48"},{"size":24190,"mtime":1636613264270,"results":"73","hashOfConfig":"48"},{"size":7410,"mtime":1642636414761,"results":"74","hashOfConfig":"48"},{"size":386,"mtime":1630692468135,"results":"75","hashOfConfig":"48"},{"size":2345,"mtime":1642637238446,"results":"76","hashOfConfig":"48"},{"size":3278,"mtime":1642637035794,"results":"77","hashOfConfig":"48"},{"size":1720,"mtime":1642636668331,"results":"78","hashOfConfig":"48"},{"size":4258,"mtime":1642636053780,"results":"79","hashOfConfig":"48"},{"size":5014,"mtime":1642636787318,"results":"80","hashOfConfig":"48"},{"size":7375,"mtime":1642636859110,"results":"81","hashOfConfig":"48"},{"size":369,"mtime":1626846725760,"results":"82","hashOfConfig":"48"},{"size":2217,"mtime":1636611958677,"results":"83","hashOfConfig":"48"},{"size":561,"mtime":1642636966154,"results":"84","hashOfConfig":"48"},{"size":1911,"mtime":1639636680891,"results":"85","hashOfConfig":"48"},{"size":696,"mtime":1642636245906,"results":"86","hashOfConfig":"48"},{"size":3041,"mtime":1642637262641,"results":"87","hashOfConfig":"48"},{"size":5667,"mtime":1642637285513,"results":"88","hashOfConfig":"48"},{"size":15208,"mtime":1636605386157,"results":"89","hashOfConfig":"48"},{"size":6883,"mtime":1642637176187,"results":"90","hashOfConfig":"48"},{"size":2022,"mtime":1634705634777,"results":"91","hashOfConfig":"48"},{"size":358,"mtime":1633670299323,"results":"92","hashOfConfig":"48"},{"size":368,"mtime":1642636023837,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"oxb9l2",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/index.js",[],["191","192"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/reportWebVitals.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Login.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Dashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Constants.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Quote.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteList.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteDetail.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Routes.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/AdminDashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInventory.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditInventory.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageOperations.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditOperations.js",["193","194","195","196"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Utils.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageWorker.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditWorker.js",["197","198"],"import React, { Component } from 'react';\n\nimport AdminService from \"../services/admin.service\";\n\nclass EditWorker extends Component {\n    state = {\n        item: this.props.selectedItem,\n        editWorkerPage: this.props.editWorkerPage,\n        errors: {}\n    }\n    handleChange(propertyName, event) {\n        if(event.target.type === 'number') {\n            event.target.value = Math.abs(event.target.value);\n        }\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    saveWorker() {\n        if (this.state.item.id !== undefined) {\n            this.editWorker();\n        } else {\n            this.createWorker();\n        }\n\n    }\n    validateForm() {\n        let errors = {};\n        let isValid = true;\n        if (!this.state.item.name) {\n            isValid = false;\n            errors[\"name\"] = \"Please enter your name.\";\n        }\n        if (!this.state.item.email) {\n            isValid = false;\n            errors[\"email\"] = \"Please enter your email Address.\";\n        }\n        if (typeof this.state.item.email !== \"undefined\") {\n            var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n            if (!pattern.test(this.state.item.email)) {\n                isValid = false;\n                errors[\"email\"] = \"Please enter valid email address.\";\n            }\n        }\n        if (!this.state.item.phone) {\n            isValid = false;\n            errors[\"phone\"] = \"Please enter your phone number.\";\n        }\n        if (typeof this.state.item.phone !== \"undefined\") {\n            var pattern = new RegExp(/^[0-9\\b]+$/);\n            if (!pattern.test(this.state.item.phone)) {\n                isValid = false;\n                errors[\"phone\"] = \"Please enter only number.\";\n            } else if (this.state.item.phone.length != 10) {\n                isValid = false;\n                errors[\"phone\"] = \"Please enter valid phone number.\";\n            }\n        }\n\n        this.setState({\n            errors: errors\n        });\n        return isValid;\n\n    }\n    editWorker() {\n        if(this.validateForm()) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"phone\": this.state.item.phone,\n                \"address\": this.state.item.address,\n                \"email\": this.state.item.email,\n                \"avail_per_day\": this.state.item.avail_per_day,\n                \"cost_per_hr\": this.state.item.cost_per_hr,\n                \"total_avail_per_week\": this.state.item.total_avail_per_week,\n                \"professionId\": this.state.item.professionId\n            };\n            AdminService.editWorker(this.state.item.id, data).then(\n                response => {\n                    this.props.parentCallback(response);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n    createWorker() {\n        if(this.validateForm()) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"phone\": this.state.item.phone,\n                \"address\": this.state.item.address,\n                \"email\": this.state.item.email,\n                \"avail_per_day\": this.state.item.avail_per_day,\n                \"cost_per_hr\": this.state.item.cost_per_hr,\n                \"total_avail_per_week\": this.state.item.total_avail_per_week,\n                \"professionId\": this.state.item.professionId\n            };\n\n            AdminService.createWorker(data).then(\n                response => {\n                    this.props.parentCallback(response);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"col edit-worker\">\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col-4\">\n\n                            <nav aria-label=\"breadcrumb\">\n                                <ul className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                        <span className=\"mb-1 underline\">Manage</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Worker</span>\n                                    </li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                        <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Worker</span>\n                                    </li>\n                                </ul>\n                            </nav>\n\n                        </div>\n                        <div className=\"col-8 text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                            <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveWorker()}>Save</button>\n                        </div>\n                    </div>\n\n                    <div className=\"blue-box-div row\">\n                        <div className=\"col white-border-right\">\n                            <div>\n                                <span>Worker Name</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.name}\n                                    onChange={this.handleChange.bind(this, 'name')} />\n                                <div className=\"text-danger\">{this.state.errors.name}</div>\n                            </div>\n                            <div>\n                                <span>Phone</span>\n                                <input type=\"tel\"\n                                    className=\"form-control\" defaultValue={this.state.item.phone}\n                                    onChange={this.handleChange.bind(this, 'phone')} />\n                                <div className=\"text-danger\">{this.state.errors.phone}</div>\n                            </div>\n                            <div>\n                                <span>Address</span>\n                                <textarea className=\"form-control\" rows=\"3\"\n                                    defaultValue={this.state.item.address}\n                                    onChange={this.handleChange.bind(this, 'address')}></textarea>\n\n                            </div>\n                            <div>\n                                <span>Email</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.email}\n                                    onChange={this.handleChange.bind(this, 'email')} />\n                                <div className=\"text-danger\">{this.state.errors.email}</div>\n                            </div>\n                            <div>\n                                <span>Available per Day</span>\n                                <input type=\"number\"\n                                    className=\"form-control\" defaultValue={this.state.item.avail_per_day}\n                                    onChange={this.handleChange.bind(this, 'avail_per_day')} />\n                            </div>\n                            <div>\n                                <span>Cost per Hour</span>\n                                <input type=\"number\"\n                                    className=\"form-control\" defaultValue={this.state.item.cost_per_hr}\n                                    onChange={this.handleChange.bind(this, 'cost_per_hr')} />\n                            </div>\n                            <div>\n                                <span>Total Avalability per Week</span>\n                                <input type=\"number\"\n                                    className=\"form-control\" defaultValue={this.state.item.total_avail_per_week}\n                                    onChange={this.handleChange.bind(this, 'total_avail_per_week')} />\n                            </div>\n                            <div>\n                                <span>Profession</span>\n                                <select className=\"form-control\" defaultValue={this.state.item.professionId} onChange={this.handleChange.bind(this, 'professionId')} >\n                                    <option selected>Select a Profession</option>\n                                    <option value=\"1\">Engineer</option>\n                                    <option value=\"2\">Painter</option>\n                                </select>\n                            </div>\n\n                        </div>\n                        <div className=\"col\">\n                            <span> {this.state.item.operations_tagged ? 'Operations Tagged' : 'No Operations Tagged'}</span>\n                            <div>\n                                {this.state.item.operations_tagged && this.state.item.operations_tagged.map((operation, index) => (\n                                    <span className=\"badge tool-badge\">Operation {index + 1} - {operation}</span>\n                                )\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\nexport default EditWorker;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageProjects.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditProject.js",["199","200","201"],"import React, { Component } from 'react';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AdminService from \"../services/admin.service\";\nimport Popup from \"../components/Popup\";\n\nclass EditProject extends Component {\n    constructor(props) {\n        super(props);\n        this.getAllWorkers();\n        this.getSingleProject();\n    }\n    state = {\n        item: {},\n        workerList: [],\n        selectedWorker: {},\n        popupConfig: {},\n        isPopupOpen: false,\n        errors: {},\n        hasMoreItems: true,\n        pageNo: 0\n    }\n    getSingleProject = () => {\n        AdminService.getSingleProject(this.props.selectedId).then(\n          response => {\n            if (response) {\n              this.setState({\n                item: response.data\n              });\n            }\n          },\n          error => {\n            console.log(\"Error\");\n          }\n        );\n      };\n    handleChange(propertyName, event) {\n        if(event.target.type === 'number') {\n            event.target.value = Math.abs(event.target.value);\n        }\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    handleDateChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = new Date(event);\n        this.setState({ item: item });\n    }\n    handleClose = () => {\n        this.setState({\n            isPopupOpen: false\n        });\n    }\n    showPopupMessage(message) {\n        this.setState({\n            isPopupOpen: true,\n            popupConfig: {\n                header: \"Message\",\n                body: message,\n                type: \"message\"\n            }\n        });\n    }\n    validateForm() {\n        let errors = {};\n        let isValid = true;\n        \n        if (!this.state.item.name) {\n            isValid = false;\n            errors[\"name\"] = \"Please enter project name.\";\n        }\n        this.setState({\n            errors: errors\n        });\n        return isValid;\n    }\n\n    saveProject() {\n        if(this.validateForm()) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"desc\": this.state.item.desc,\n                \"startDate\": this.state.item.start_date,\n                \"endDate\": this.state.item.end_date,\n                \"workers\": this.state.item.workers\n            };\n            AdminService.editProject(this.state.item.id, data).then(\n                response => {\n                    // this.showPopupMessage(response.data.message);\n                    this.props.parentCallback(response);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    getAllWorkers() {\n        AdminService.getAllWorkers(this.state.pageNo).then(\n            response => {\n                if(response) {\n                    var tmpListitems = [];\n                    if(response.data.currentPage !== 0 ){\n                        tmpListitems = [...this.state.workerList, ...response.data.rows];\n                    } else {\n                        tmpListitems = response.data.rows;\n                    }\n                    this.setState({\n                        workerList: tmpListitems,\n                        pageNo: this.state.pageNo+1\n                    });\n\n                    if(this.state.pageNo >= response.data.currentPage) {\n                        this.setState({\n                            hasMoreItems: false\n                        });\n                    }\n                } \n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n\n    statusChange(event) {\n        var data = {\n            \"status\": \"CLOSED\"\n        };\n        AdminService.changeProjectStatus(this.state.item.id, data).then(\n            response => {\n                this.showPopupMessage(response.data.message);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    handleWorkerSelection(event) {\n        this.state.selectedWorker = this.state.workerList.find(o => o.id == event.target.value);\n    }\n    addWorker(event) {\n        this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n        //this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n        var selectedProject = this.state.item;\n        if (!selectedProject.workers) {\n            selectedProject['workers'] = [];\n        }\n        selectedProject.workers.push(this.state.selectedWorker);\n        this.setState({ item: selectedProject });\n        console.log(this.state.item);\n\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"col edit-inventory\">\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col-4\">\n\n                            <nav aria-label=\"breadcrumb\">\n                                <ul className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                        <span className=\"mb-1 underline\">Manage</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Project</span>\n                                    </li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                        <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Project</span>\n                                    </li>\n                                </ul>\n                            </nav>\n\n                        </div>\n                        <div className=\"col-8 text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                            <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveProject()}>Save</button>\n                        </div>\n                    </div>\n\n                    <div className=\"blue-box-div row\">\n                        <div className=\"col white-border-right\">\n                            <div>\n                                <span>Project Name</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.name}\n                                    onChange={this.handleChange.bind(this, 'name')} />\n                                <div className=\"text-danger\">{this.state.errors.name}</div>\n                            </div>\n                            <div>\n                                <span>Description</span>\n                                <textarea className=\"form-control\" rows=\"3\"\n                                    defaultValue={this.state.item.desc}\n                                    onChange={this.handleChange.bind(this, 'desc')}></textarea>\n                            </div>\n<div>\n                                <span>Start Date</span>\n                                <DatePicker\n                                    selected={this.state.item.start_date && new Date(this.state.item.start_date)}\n                                    onChange={this.handleDateChange.bind(this, 'start_date')}\n                                    className=\"form-control\"\n                                    minDate={new Date()}\n                                />\n                            </div>\n                            <div>\n                                <span>End Date</span>\n                                <DatePicker\n                                    selected={this.state.item.end_date && new Date(this.state.item.end_date)}\n                                    onChange={this.handleDateChange.bind(this, 'end_date')}\n                                    className=\"form-control\"\n                                    minDate={new Date(this.state.item.start_date)}\n                                />\n                            </div>\n\n                        </div>\n\n                        <div className=\"col\">\n\n\n                            <div className=\"row\">\n                                <div className=\"col\"><span>Worker</span></div>\n                                <div className=\"col\"><span>Required Hours</span></div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <select className=\"form-control\" onChange={this.handleWorkerSelection.bind(this)}>\n                                        <option selected>Select Worker</option>\n                                        {this.state.workerList.map((item) => (\n                                            <option key={item.id} value={item.id}>{item.name}</option>\n                                        ))}\n                                    </select>\n                                </div>\n\n                                <div className=\"col\">\n                                    <input type=\"number\" className=\"form-control col-5 d-inline\" onChange={this.handleChange.bind(this, 'workerRequired')} />\n                                    <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4 d-inline\" onClick={this.addWorker.bind(this)}>Add</button>\n                                </div>\n\n                            </div>\n\n                            <div className=\"row mt-1 quote-req-header font-weight-bold\">\n                                <div className=\"col-sm\">\n                                    <label>Name</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Profession</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Available per day </label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Required Hours</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Cost per hour</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Estimated Cost</label>\n                                </div>\n                            </div>\n\n                            {this.state.item.workers && this.state.item.workers.map(listitem => (\n\n                                <div className=\"row mt-1\" >\n                                    <div className=\"col-sm\" >\n                                        <label className=\"description-truncate text-truncate\">{listitem.name}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.name}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.avail_per_day}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.required_hrs}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.cost_per_hr}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.cost_per_hr * listitem.required_hrs}</label>\n                                    </div>\n                                </div>\n                            ))}\n\n                           \n\n\n\n\n\n                            <div className=\"row\">\n                                <button type=\"button\" className=\"btn btn-green btn-sm m-4 pr-4 pl-4 d-inline\" onClick={this.statusChange.bind(this)}>Project Completed</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <Popup popupConfig={this.state.popupConfig} openFlag={this.state.isPopupOpen} parentCloseCallback={this.handleClose} ></Popup>\n            </React.Fragment>\n        );\n    }\n}\nexport default EditProject;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageCustomer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditCustomer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInspections.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/auth.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/admin.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/user.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditQuote.js",["202","203","204","205","206","207"],"import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport { Accordion, Card } from \"react-bootstrap\";\n\nimport { statusColorClass, headerBtn } from '../common/Utils.js';\nimport Popup from \"../components/Popup\";\nimport TableHeader from \"../components/TableHeader\";\nimport TableRow from \"../components/TableRow\";\nimport AdminService from \"../services/admin.service\";\nimport { validationMessages } from '../common/Constants';\n\nclass QuoteReqUpdate extends Component {\n  state = {\n    selectedItem: {},\n    open: false,\n    operationsList: [],\n    tagoperationList: [],\n    inspectionsList: [],\n    //selectedInspection: '',\n    popupConfig: {},\n    isPopupOpen: false,\n    selectedOperationId: 0,\n    configOpId: 0,\n    totalCost: 0,\n    taxCheckboxChecked: false\n  }\n  constructor(props) {\n    super(props);\n    this.getSingleQuote();\n    this.getOperations();\n    this.getInspections();\n  }\n  getOperations = () => {\n    AdminService.getAllOperations().then(\n      response => {\n        if (response) {\n          this.setState({\n            tagoperationList: response.data.rows\n          });\n        }\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n\n  getInspections = () => {\n    AdminService.getAllInspection().then(\n      response => {\n        if (response) {\n          this.setState({\n            inspectionsList: response.data.inspections.rows\n          });\n        }\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n\n  getSingleQuote = () => {\n    AdminService.getSingleQuote(this.props.selectedQuoteId).then(\n      response => {\n        if (response) {\n          this.setState({\n            selectedItem: response.data,\n            taxCheckboxChecked: response.data.taxApplied\n          });\n        }\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n  resetReq() {\n\n  }\n  showAvailableTools(id) {\n    this.setState({\n      configOpId: id,\n      selectedOperationId: id,\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Available Tools\",\n        body: '',\n        type: \"toolsList\"\n      }\n    });\n  }\n  showAvailableWorker(id) {\n    this.setState({\n      configOpId: id,\n      selectedOperationId: id,\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Available Workers\",\n        body: '',\n        type: \"workerList\"\n      }\n    });\n  }\n\n  saveQuoteUpdate() {\n    var tmptoolobj = [];\n    this.state.operationsList.QuoteOperationInv && this.state.operationsList.QuoteOperationInv.map((item, i) => {\n      var toolobj = {};\n      toolobj[\"invId\"] = item.Inventories.id;\n      toolobj[\"reqQty\"] = parseInt(item.req_quantity);\n      if(item.Inventories.editedCost) {\n        toolobj[\"editedCost\"] = parseInt(item.Inventories.editedCost);\n      }\n      tmptoolobj.push(toolobj);\n    });\n\n\n    var tmpworkerobj = [];\n    this.state.operationsList.QuoteOperationWorker && this.state.operationsList.QuoteOperationWorker.map((item, i) => {\n      var workerobj = {};\n      workerobj[\"workerId\"] = item.Workers.id;\n      workerobj[\"totalHrs\"] = parseInt(item.total_hrs_req);\n      if(item.Workers.editedCost) {\n        workerobj[\"editedCost\"] = parseInt(item.Workers.editedCost);\n      }\n      tmpworkerobj.push(workerobj);\n    });\n\n\n    var data = {\n      \"quoteId\": this.state.selectedItem.id,\n      \"status\": this.state.selectedItem.status,\n      \"tax\": this.state.taxCheckboxChecked ? 1 : 0,\n      \"operations\": [\n        {\n          \"operationId\": this.state.configOpId,\n          \"inspection\": this.state.selectedItem.inspection_id,\n          \"operation_total_hrs\": this.state.operationsList.operation_total_hrs,\n          \"operation_cost\": this.state.operationsList.operation_cost,\n          \"tools\": tmptoolobj,\n          \"workers\": tmpworkerobj\n        }\n      ]\n    };\n    AdminService.tagQuote(data).then(\n      response => {\n        \n        if (response)\n          this.showPopupMessage(response.data.message);\n        else\n          this.showPopupMessage(\"Something went wrong!\");\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n\n\n  }\n  submitQuoteUpdate() {\n    var data = {\n      \"status\": \"QUOTE_RECEIVED\"\n    };\n    AdminService.changeStatus(this.state.selectedItem.id, data).then(\n      response => {\n        console.log(response);\n        this.showPopupMessage(response.data.message);\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  }\n  rejectQuote() {\n\n    this.setState({\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Reject Quote\",\n        body: '',\n        type: \"rejectQuote\"\n      }\n    });\n  }\n  changeQuoteToProject() {\n    var data = {\n      \"name\": this.state.selectedItem.title,\n      \"desc\": this.state.selectedItem.desc,\n      \"startDate\": this.state.selectedItem.endDate,\n      \"endDate\": this.state.selectedItem.startDate\n    };\n    AdminService.convertToProject(this.state.selectedItem.id, data).then(\n      response => {\n        if (response.data)\n          this.showPopupMessage(response.data.message);\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  }\n\n  changeQuoteStatus(status, reasonTxt) {\n    var data = {\n      \"status\": status\n    };\n    if (status === \"QUOTE_REJECTED\") {\n      data.reason = reasonTxt\n    }\n    AdminService.changeStatus(this.state.selectedItem.id, data).then(\n      response => {\n        if (response.data)\n          this.showPopupMessage(response.data.message);\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  }\n\n  showPopupMessage(message) {\n    this.setState({\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Message\",\n        body: message,\n        type: \"message\"\n      }\n    });\n  }\n\n  handleBreadCrumb() {\n    this.props.parentCallback();\n  }\n  deleteOperation(opId, opName, event) {\n    this.setState({\n      deleteOpId: opId,\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Confirm to Delete\",\n        body: validationMessages.DELETE_CONFIRM + opName,\n        type: \"confirmation\"\n      }\n    });\n\n\n  }\n\n  removeTool() {\n    alert(\"Do you want to remove tool\");\n  }\n  handleChange = e => {\n    console.log(e);\n  }\n\n  onDeleteRowClick = event => {\n    console.log(event.target.name);\n  }\n\n\n\n\n  handleReqAvailChange = event => {\n    let { value, min, max } = event.target;\n    value = Math.max(Number(min), Math.min(Number(max), Number(value)));\n    this.setState({ value });\n  }\n\n  handleClose = (list) => {\n\n    if (list && this.state.popupConfig.type === \"configureOperation\") {\n      var obj = this.state.tagoperationList.find(o => o.id == this.state.configOpId);\n      if (obj) {\n        var QuoteOperation = {\n          \"Operations\": {\n            \"id\": obj.id,\n            \"name\": obj.name,\n            \"desc\": obj.desc\n          },\n          \"QuoteOperationInv\": list.tools,\n          \"QuoteOperationWorker\": list.workers,\n          \"operation_cost\": list.totalCost,\n          \"operation_total_hrs\": list.workers.reduce((a, v) => a = parseInt(a) + parseInt(v.total_hrs_req), 0)\n        };\n        var newQuoteOperation = [...this.state.selectedItem.QuoteOperation, QuoteOperation];\n\n        var selectedItem = this.state.selectedItem;\n        selectedItem.QuoteOperation = newQuoteOperation;\n        this.setState({\n          operationsList: QuoteOperation\n        });\n        this.setState({\n          selectedItem\n        });\n      }\n    }\n    else if (list && this.state.popupConfig.type === \"toolsList\") {\n      console.log(this.state);\n      var obj = this.state.selectedItem.QuoteOperation.find(o => o.Operations.id == this.state.configOpId);\n      if (obj) {\n        console.log(obj.QuoteOperationInv);\n        var newInventryList = [...obj.QuoteOperationInv, list.tools];\n        console.log(newInventryList);\n      }\n    } else if (list && this.state.popupConfig.type === \"operationList\") {\n      /*var tmp = this.state.operationsList;\n      tmp.push(list);\n      this.setState({\n        operationsList: tmp\n      });*/\n    }\n    this.setState({\n      isPopupOpen: false\n    });\n\n  };\n\n  handleModalYes = (data) => {\n\n    this.setState({\n      isPopupOpen: false\n    });\n\n\n    if (this.state.popupConfig.type === \"rejectQuote\") {\n      this.changeQuoteStatus(\"QUOTE_ADMIN_REJECTED\", data);\n    }\n\n    else {\n      var tempList = this.state.selectedItem.QuoteOperation.filter(item => item.Operations.id !== this.state.deleteOpId);\n      var tmpSelectedItem = this.state.selectedItem;\n      tmpSelectedItem.QuoteOperation = tempList;\n      this.setState({\n        selectedItem: tmpSelectedItem\n      });\n    }\n\n    /*\n    AdminService.deleteQuote(this.state.selectedItem.id).then(\n      response => {\n        var tempList = this.state.listitems.filter(item => item.id !== this.state.selectedItem.id);\n        this.setState({\n          listitems: tempList,\n          selectedItem: []\n        });\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n    */\n\n\n  };\n\n  handleInspectionChange(event) {\n\n    \n\n    if(event.target.value !== '') {\n      var data = {\n        \"inspectionId\": event.target.value\n      }\n      AdminService.assignQuoteInspection(this.state.selectedItem.id, data).then(\n        response => {\n          this.showPopupMessage(response.data.message);\n        },\n        error => {\n          console.log(\"Error\");\n        }\n      );\n      var tmpSelectedItem = this.state.selectedItem;\n    tmpSelectedItem.inspection_id = event.target.value;\n    this.setState({\n      selectedItem: tmpSelectedItem\n    });\n\n    }\n\n\n  };\n\n  handleOperationChange(event) {\n    if(event.target.value !== '') {\n    this.setState({\n      configOpId: event.target.value\n    });\n\n    this.setState({\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Configure Operations\",\n        body: '',\n        type: \"configureOperation\"\n      }\n    });\n  }\n\n  };\n\n\n\n\n  showOperationTools(inventory) {\n\n    var tableHeader = [\"inputCheckbox\", \"Tool Name\", \"Available Quantity\", \"Cost\", \"Required Quantity\"];\n    return (\n      <Table responsive=\"sm\">\n        <tbody>\n          <TableHeader\n            headerObj={tableHeader}\n            onCheckboxChange={this.handleChange}\n          />\n          {inventory && inventory.map((tool, i) => {\n            return (<TableRow\n              type=\"tool\"\n              listItem={tool.Inventories}\n              reqQty={tool.req_quantity}\n              editedCost = {tool.Inventories.editedCost ? tool.Inventories.editedCost : tool.edited_cost}\n              deleteBtn={true}\n              onDeleteRowClick={this.onDeleteRowClick}\n            />);\n          })\n          }\n        </tbody>\n      </Table>\n    );\n  }\n\n  showOperationWorkers(workers) {\n    var tableHeader = [\"inputCheckbox\", \"Worker Name\", \"Available per Day\", \"Cost per Hour\", \"Required Hour\"];\n    return (\n      <Table responsive=\"sm\">\n        <tbody>\n          <TableHeader\n            headerObj={tableHeader}\n            onCheckboxChange={this.handleChange}\n          />\n          {workers && workers.map((item, i) => {\n            return (<TableRow\n              type=\"worker\"\n              listItem={item.Workers}\n              reqQty={item.total_hrs_req}\n              editedCost = {item.Workers.editedCost ? item.Workers.editedCost : item.edited_cost}\n              deleteBtn={true}\n              onDeleteRowClick={this.onDeleteRowClick}\n            />);\n          })\n          }\n        </tbody>\n      </Table>\n    );\n\n  }\n  getCost() {\n    if (this.state.selectedItem.QuoteOperation) {\n      var totalCost = (this.state.selectedItem.QuoteOperation.reduce((a, v) => a = parseInt(a) + parseInt(v.operation_cost), 0));\n      if (this.state.taxCheckboxChecked) {\n        totalCost = totalCost + totalCost * (5 / 100);\n      }\n      if (this.state.selectedItem.inspection_id) {\n        debugger;\n        var obj = this.state.inspectionsList.find(o => o.id == this.state.selectedItem.inspection_id);\n        if(obj) {\n          totalCost = totalCost + obj.cost;\n        }\n        \n      }\n      return (Number((totalCost).toFixed(2)));\n    } else {\n      return (0);\n    }\n\n  };\n\n  handleTaxChange(evt) {\n    this.setState({ taxCheckboxChecked: evt.target.checked });\n    var data = {\n      \"status\": evt.target.checked\n    };\n    AdminService.applyTax(this.state.selectedItem.id, data).then(\n      response => {\n        console.log(response);\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n\n  \n\n  renderMeasureTable() {\n    var measures = this.state.selectedItem.Measures;\n    return (<div className=\"quote-data-div\">\n      <span className=\"underline half blue\">Measurements</span>\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <label>Name</label>\n        </div>\n        <div className=\"col\">\n          <label>Unit</label>\n        </div>\n        <div className=\"col\">\n          <label>Quantity</label>\n        </div>\n      </div>\n\n      {measures && measures.map((item, index) => {\n        return (\n          <div className=\"row pb-2 green-text-color\" key={item.id}>\n            <div className=\"col\">\n              <label>{item.name}</label>\n            </div>\n            <div className=\"col\">\n              <label>{item.unit}</label>\n            </div>\n            <div className=\"col\">\n              <label>{item.qty}</label>\n            </div>\n\n          </div>\n        )\n      })\n      }\n    </div>);\n  }\n  removeUploadedImage(file) {\n\n    /*\n        const config = {\n            bucketName: 'fuentes-fileupload',\n            dirName: 'quote-attachments',\n            region: 'us-west-1',\n            accessKeyId: 'AKIA5ARA5MYMNVC47U6F',\n            secretAccessKey: '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'\n        }\n       \n       \n        const ReactS3Client = new S3(config);\n    \n        const filename = file.fileName;\n    \n        ReactS3Client\n            .deleteFile(filename)\n            .then(response => console.log(response))\n            .catch(err => console.error(err))\n    \n    \n    */\n\n  }\n  showUploadImage(filePath) {\n    this.setState({\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Uploaded Data\",\n        body: filePath,\n        type: \"image\"\n      }\n    });\n  }\n\n  render() {\n\n    var userData = {};\n    var uploads = [];\n    if (this.state.selectedItem) {\n      userData = this.state.selectedItem.User;\n      uploads = this.state.selectedItem.Uploads;\n    }\n\n    return (\n      <React.Fragment>\n        <Popup popupConfig={this.state.popupConfig} openFlag={this.state.isPopupOpen} parentCloseCallback={this.handleClose} parentConfirmCallback={this.handleModalYes.bind(this)}></Popup>\n        <div className=\"col admin-quote-page\">\n          <div className=\"list-group-header section-header row\">\n            <div className=\"col-4\">\n\n              <nav aria-label=\"breadcrumb\">\n                <ul className=\"breadcrumb\">\n                  <li key=\"breadcrumb1\" className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                    <span className=\"mb-1 underline\">Quote</span>\n                    <span className=\"mb-1 blue-color pl-2\">Requests</span>\n                  </li>\n                  <li key=\"breadcrumb2\" className=\"breadcrumb-item active\" aria-current=\"page\">\n                    <span className=\"mb-1\">Update</span>\n                    <span className=\"mb-1 blue-color pl-2\">Quote</span>\n                  </li>\n                </ul>\n              </nav>\n\n            </div>\n\n\n\n            {headerBtn(this.state.selectedItem.status) > 4 ? (<div className=\"col-8 text-right\">\n              <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.rejectQuote()} >Reject</button>\n              <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.changeQuoteToProject()}>Accept Purchase Order</button>\n            </div>) : (<div className=\"col-8 text-right\">\n              <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n              <button type=\"button\" className=\"btn btn-info btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveQuoteUpdate()}>Save</button>\n              <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.submitQuoteUpdate()}>Submit</button>\n            </div>)}\n\n\n          </div>\n          <div>\n            <div className=\"blue-box-div row\">\n              <div className=\"col-3 white-border-right\">\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Title</span>\n                  <span className={\"badge p-2 ml-2 float-right \" + statusColorClass(this.state.selectedItem.status)}>\n                  {this.state.selectedItem.status === \"QUOTE_RECEIVED\" ? \"QUOTE_SUBMITTED\" : this.state.selectedItem.status}\n                    </span>\n                  <p className=\"green-text-color\">{this.state.selectedItem.title}</p>\n                </div>\n\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Description</span>\n                  <p className=\"green-text-color\">{this.state.selectedItem.desc}</p>\n                </div>\n\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Submitted By</span>\n                  <p className=\"green-text-color\">{userData && userData.name}</p>\n                </div>\n\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Submitted On</span>\n                  <p className=\"green-text-color\">{(new Date(this.state.selectedItem.createdAt)).toLocaleDateString()}</p>\n                </div>\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Attachments</span>\n\n                  {uploads && uploads.map((item, index) => {\n                    return (\n                      <div className=\"\">\n                        <button className=\"btn btn-link p-0\" onClick={() => this.showUploadImage(item.filePath)}>{item.fileName}</button>\n\n                      </div>\n                    )\n                  })\n                  }\n\n                </div>\n                {this.state.selectedItem.Measures &&\n                  this.renderMeasureTable()\n                }\n              </div>\n\n\n              {this.state.selectedItem.status === \"PROJECT_IN_PROGRESS\" || this.state.selectedItem.status === \"QUOTE_PO_SUBMIT\" ?\n\n                <div className=\"col\">\n                  <span className=\"underline blue mb-2\">Purchase Order</span>\n                  <img src={this.state.selectedItem.submittedPO} className='po-img' alt='...'></img>\n\n                </div>\n\n\n                :\n\n                (<div className=\"col quote-measurements\">\n                  <div className=\"row\">\n                    <div className=\"col-2\">\n                      <span className=\"underline blue\">Make a Quote</span>\n                    </div>\n                    <div className=\"col text-right\">\n\n\n                      <select className=\"form-control btn-green mb-2 mr-2 col-4 d-inline-block\" defaultValue={this.state.selectedItem.inspection_id} onChange={this.handleInspectionChange.bind(this)}>\n                      <option value=\"\" >select Inspection</option>\n                        {this.state.inspectionsList && this.state.inspectionsList.map((item, index) => (\n\n this.state.selectedItem.inspection_id === item.id ?\n<option key={item.id} value={item.id}  selected >{item.name}</option>\n:\n<option key={item.id} value={item.id}  >{item.name}</option>\n\n\n                        ))}\n                      </select>\n\n\n                      <select className=\"form-control btn-green mb-2 mr-2 col-4 d-inline-block\" onChange={this.handleOperationChange.bind(this)}>\n                        <option value=\"\">Tag Operations</option>\n                        {this.state.tagoperationList && this.state.tagoperationList.map((item, index) => (\n                          <option key={item.id} value={item.id}>{item.name}</option>\n                        ))}\n                      </select>\n\n                      Apply Tax <input type=\"checkbox\" onChange={this.handleTaxChange.bind(this)} defaultChecked={this.state.selectedItem.taxApplied}></input>\n                      <span className=\"blue ml-4\">Total Cost</span>\n                      <span className=\"badge btn-blue p-2 ml-2\">{this.getCost()}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"card-header measurements-header row mt-1 font-weight-bold\">\n                    <div className=\"col-sm\">\n                      <label>Operation</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label >Description</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label>Hours</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label>Workers</label>\n                    </div>\n\n                    <div className=\"col-sm\">\n                      <label>Cost</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label>Tools</label>\n                    </div>\n\n                  </div>\n\n                  <Accordion>\n\n                    {this.state.selectedItem.QuoteOperation && this.state.selectedItem.QuoteOperation.map((operation, i) => {\n                      return (\n\n                        <Card key={i + \"cardKey\"}>\n                          <Accordion.Toggle as={Card.Header} eventKey={i + \"\"}>\n\n                            <div className=\"row mt-1 green-text-color\">\n                              <div className=\"col-sm\">\n                                <label>{operation.Operations.name}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label className=\"acc-description\">{operation.Operations.desc}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label>{operation.operation_total_hrs}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label>{operation.QuoteOperationWorker && operation.QuoteOperationWorker.length}</label>\n                              </div>\n\n                              <div className=\"col-sm\">\n                                <label>{operation.operation_cost}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label>{operation.QuoteOperationInv && operation.QuoteOperationInv.length}</label>\n                                <button onClick={this.deleteOperation.bind(this, operation.Operations.id, operation.Operations.name)} className=\"btn delete-btn float-right mr-5\" ></button>\n                              </div>\n                            </div>\n\n                          </Accordion.Toggle>\n                          <Accordion.Collapse eventKey={i + \"\"}>\n                            <Card.Body>\n                              {/* \n  <button type=\"button\" className=\"btn btn-blue btn-sm ml-2 pr-4 pl-4\" onClick={() => this.showAvailableTools(operation.Operations.id)}>Add Tools</button>\n    <button type=\"button\" className=\"btn btn-blue btn-sm ml-2 pr-4 pl-4\" onClick={() => this.showAvailableWorker(operation.Operations.id)}>Add Workers</button>\n                                                        \n*/}\n                              {operation.QuoteOperationInv.length > 0 && this.showOperationTools(operation.QuoteOperationInv)}\n                              {operation.QuoteOperationWorker.length > 0 && this.showOperationWorkers(operation.QuoteOperationWorker)}\n                            </Card.Body>\n                          </Accordion.Collapse>\n                        </Card>\n\n                      );\n                    })}\n                  </Accordion>\n\n                </div>)\n              }\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\nexport default QuoteReqUpdate;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageQuote.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/MyAlert.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Popup.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Sidebar.js",["208"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerDashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerOperations.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerProjects.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerTimesheet.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Checkbox.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableRow.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableHeader.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/worker.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/SubHeader.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/OperationList.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/ForgotPassword.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/ConfigureOperation.js",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport TableRow from \"../components/TableRow\";\nimport TableHeader from \"../components/TableHeader\";\nimport AdminService from \"../services/admin.service\";\nimport MyAlert from \"../components/MyAlert\";\n\nclass ConfigureOperation extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listitems: [],\n            toolList: [],\n            workerList: [],\n            selectedToolList: [],\n            selectedWorkerList: [],\n            showAlert: false,\n            alertConfig: {\n                \"variant\": \"danger\"\n            },\n            totalCost: 0,\n            tabActiveKey: \"tools\",\n            workerSearchValue: \"\",\n            toolSearchValue: \"\",\n            hasMoreTools: true,\n            toolPageNo: 0,\n            hasMoreWorkers: true,\n            workerPageNo: 0\n        }\n        // this.getData();\n        this.getAllTools();\n    }\n\n    getData() {\n        if (this.props.showTools) {\n            this.getAllTools();\n        }\n        if (this.props.showWorkers) {\n            this.getAllWorkers();\n        }\n    }\n\n    getAllTools() {\n        AdminService.getAllInventory(this.state.toolPageNo).then(\n            response => {\n                var tmpListitems = [...this.state.toolList, ...response.data.rows];\n                this.setState({\n                    toolList: tmpListitems,\n                    toolPageNo: this.state.toolPageNo + 1\n                });\n\n                if (this.state.toolPageNo >= response.data.currentPage) {\n                    this.setState({\n                        hasMoreTools: false\n                    });\n                }\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    getAllWorkers() {\n        AdminService.getAllWorkers(this.state.workerPageNo).then(\n            response => {\n                var tmpListitems = [...this.state.workerList, ...response.data.rows];\n                this.setState({\n                    workerList: tmpListitems,\n                    workerPageNo: this.state.workerPageNo + 1\n                });\n\n                if (this.state.workerPageNo >= response.data.currentPage) {\n                    this.setState({\n                        hasMoreWorkers: false\n                    });\n                }\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    showAlertMessage(msg) {\n        this.setState(prevState => ({\n            alertConfig: {\n                ...prevState.alertConfig,\n                message: msg\n            },\n            showAlert: true\n        }))\n    }\n\n    handleCheckboxChange = changeEvent => {\n        const { name } = changeEvent.target;\n        let obj = []; obj[\"Inventories\"] = this.state.toolList.find(o => o.id == name);\n        obj[\"req_quantity\"] = this.state.toolList.find(o => o.id == name).req_quantity;\n\n        if (!this.state.toolList.find(o => o.id == name).req_quantity) {\n            this.showAlertMessage(\"Please add required quantity\");\n            changeEvent.target.checked = false;\n        }\n        else {\n\n            this.setState({\n                showAlert: false\n            });\n            if (changeEvent.target.checked) {\n                this.state.selectedToolList.push(obj);\n                var tmpCost = 0;\n                if(obj.Inventories.editedCost) {\n                    tmpCost = this.state.totalCost + (parseInt(obj.Inventories.editedCost) * parseInt(obj.Inventories.req_quantity));\n                } else {\n                    tmpCost = this.state.totalCost + (parseInt(obj.Inventories.cost) * parseInt(obj.Inventories.req_quantity));\n                }\n                 \n                this.setState({\n                    totalCost: tmpCost\n                });\n            } else {\n                let tmpObj = this.state.selectedToolList.filter(item => item.id !== name);\n                this.state.selectedToolList = tmpObj;\n\n\n                var tmpCost = 0;\n                if(obj.Inventories.editedCost) {\n                    tmpCost = this.state.totalCost - (parseInt(obj.Inventories.editedCost) * parseInt(obj.Inventories.req_quantity));\n                } else {\n                    tmpCost = this.state.totalCost - (parseInt(obj.Inventories.cost) * parseInt(obj.Inventories.req_quantity));\n                }\n                this.setState({\n                    totalCost: tmpCost\n                });\n            }\n        }\n    };\n\n    handleWorkerCheckboxChange = changeEvent => {\n        const { name } = changeEvent.target;\n        let obj = []; obj[\"Workers\"] = this.state.workerList.find(item => item.id == name);\n        obj[\"total_hrs_req\"] = this.state.workerList.find(item => item.id == name).total_hrs_req;\n\n        if (!this.state.workerList.find(o => o.id == name).total_hrs_req) {\n            this.showAlertMessage(\"Please add required hours\");\n            changeEvent.target.checked = false;\n        }\n        else {\n            this.setState({\n                showAlert: false\n            });\n            if (changeEvent.target.checked) {\n                this.state.selectedWorkerList.push(obj)\n\n                //var tmpCost = this.state.totalCost + (obj.Workers.cost_per_hr * obj.Workers.total_hrs_req);\n\n                var tmpCost = 0;\n                if(obj.Workers.editedCost) {\n                    tmpCost = this.state.totalCost + (parseInt(obj.Workers.editedCost) * parseInt(obj.Workers.total_hrs_req));\n                } else {\n                    tmpCost = this.state.totalCost + (parseInt(obj.Workers.cost_per_hr) * parseInt(obj.Workers.total_hrs_req));\n                }\n\n\n                this.setState({\n                    totalCost: tmpCost\n                });\n\n            } else {\n                let tmpObj = this.state.selectedWorkerList.filter(item => item.id != name);\n                this.state.selectedWorkerList = tmpObj;\n\n                var tmpCost = 0;\n                if(obj.Workers.editedCost) {\n                    tmpCost = this.state.totalCost - (parseInt(obj.Workers.editedCost) * parseInt(obj.Workers.total_hrs_req));\n                } else {\n                    tmpCost = this.state.totalCost - (parseInt(obj.Workers.cost_per_hr) * parseInt(obj.Workers.total_hrs_req));\n                }\n\n\n                //var tmpCost = this.state.totalCost - (obj.Workers.cost_per_hr * obj.Workers.total_hrs_req);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            }\n        }\n    };\n    handleTableRowChange(event) {\n        if (event.target.type === 'number') {\n            event.target.value = Math.abs(event.target.value);\n        }\n\n        if(event.target.name === \"cost\") {\n            var toolId = parseInt((event.target.id).replace((event.target.name),''));\n            let obj = []; obj = this.state.toolList;\n            if (obj.find(o => o.id == toolId)) {\n                obj.find(o => o.id == toolId)['editedCost'] = event.target.value;\n            }\n            this.setState({\n                toolList: obj\n            });\n        } \n        if(event.target.name === \"cost_per_hr\") {\n            var workerId = parseInt((event.target.id).replace((event.target.name),''));\n            let obj = []; obj = this.state.workerList;\n            if (obj.find(o => o.id == workerId)) {\n                obj.find(o => o.id == workerId)['editedCost'] = event.target.value;\n            }\n            this.setState({\n                workerList: obj\n            });\n        }\n        \n    }\n\n    reqQntyChange = changeEvent => {\n        if (changeEvent.target.type === 'number') {\n            changeEvent.target.value = Math.abs(changeEvent.target.value);\n        }\n        const { name } = changeEvent.target;\n        let obj = []; obj = this.state.toolList;\n        let sObj = []; sObj = this.state.selectedToolList;\n        if (obj.find(o => o.id == name)) {\n            obj.find(o => o.id == name)['req_quantity'] = changeEvent.target.value;\n        }\n        if (sObj.find(o => o.Inventories.id == name)) {\n            sObj.find(o => o.Inventories.id == name)['req_quantity'] = changeEvent.target.value;\n        }\n        this.setState({\n            toolList: obj,\n            selectedToolList: sObj\n        });\n    };\n    reqHourChange = changeEvent => {\n        if (changeEvent.target.type === 'number') {\n            changeEvent.target.value = Math.abs(changeEvent.target.value);\n        }\n        const { name } = changeEvent.target;\n        let obj = []; obj = this.state.workerList;\n        let sObj = []; sObj = this.state.selectedWorkerList;\n        if (obj.find(o => o.id == name)) {\n            obj.find(o => o.id == name)['total_hrs_req'] = changeEvent.target.value;\n        }\n        if (sObj.find(o => o.Workers.id == name)) {\n            sObj.find(o => o.Workers.id == name)['total_hrs_req'] = changeEvent.target.value;\n        }\n        this.setState({\n            workerList: obj,\n            selectedWorkerList: sObj\n        });\n    };\n\n    createToolRow = option => (\n        <TableRow\n            type=\"tool\"\n            listItem={option}\n            onCheckboxChange={this.handleCheckboxChange}\n            onreqQntyChange={this.reqQntyChange}\n            handleTableRowChange={this.handleTableRowChange.bind(this)}\n        />\n    );\n\n    createWorkerCheckbox = option => (\n        <TableRow\n            type=\"worker\"\n            listItem={option}\n            onCheckboxChange={this.handleWorkerCheckboxChange}\n            onreqQntyChange={this.reqHourChange}\n            handleTableRowChange={this.handleTableRowChange.bind(this)}\n        />\n    );\n    createTableHeader = (type) => {\n        var tableHeader = [];\n        if (type === \"tool\") {\n            tableHeader = [\"inputCheckbox\", \"Tool Name\", \"Available Quantity\", \"Cost\", \"Required Quantity\"];\n            return (\n                <TableHeader\n                    headerObj={tableHeader}\n                    onCheckboxChange={this.handleCheckboxChange}\n                />\n            );\n        } else if (\"worker\") {\n            tableHeader = [\"inputCheckbox\", \"Worker Name\", \"Available per Day\", \"Cost per Hour\", \"Required Hours\"];\n            return (\n                <TableHeader\n                    headerObj={tableHeader}\n                    onCheckboxChange={this.handleWorkerCheckboxChange}\n                />\n            );\n        }\n    };\n    createToolList = () => (\n        this.state.toolList.filter(item => item.itemName.toLowerCase().includes(this.state.toolSearchValue)).map(this.createToolRow)\n    );\n    createWorkerList = () => (\n        this.state.workerList.filter(item => item.name.toLowerCase().includes(this.state.workerSearchValue)).map(this.createWorkerCheckbox)\n    );\n    saveConfigOperation(e) {\n        var selectedObj = {};\n        selectedObj['tools'] = this.state.selectedToolList;\n        selectedObj['workers'] = this.state.selectedWorkerList;\n        selectedObj['totalCost'] = this.state.totalCost;\n        this.props.popupClose(selectedObj);\n    };\n    selectTab(key) {\n        this.setState({\n            tabActiveKey: key\n        });\n    };\n    handleToolSearchChange(e) {\n        this.setState({\n            toolSearchValue: e.target.value.toLowerCase()\n        });\n    }\n    handleWorkerSearchChange(e) {\n        this.setState({\n            workerSearchValue: e.target.value.toLowerCase()\n        });\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n\n                <Tabs id=\"controlled-tab-example\" activeKey={this.state.tabActiveKey} onSelect={this.selectTab.bind(this)} >\n                    <Tab eventKey=\"tools\" title=\"Tools\">\n                        {this.props.showTools && <div>\n                            <span className=\"underline blue\">Add Tools</span>\n                            <div className=\"has-search mt-2\">\n                                <span className=\"fa fa-search form-control-feedback\"></span>\n                                <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search Tools...\" onChange={this.handleToolSearchChange.bind(this)} />\n                            </div>\n\n                            <Table responsive=\"sm\" className=\"conf-table\">\n                                <tbody>\n                                    <InfiniteScroll\n                                        pageStart={0}\n                                        loadMore={this.getAllTools.bind(this)}\n                                        hasMore={this.state.hasMoreTools}\n                                        loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                                        useWindow={false}\n                                    >\n                                        {this.createTableHeader(\"tool\")}\n                                        {this.createToolList()}\n                                    </InfiniteScroll>\n                                </tbody>\n                            </Table>\n                        </div>\n                        }\n                    </Tab>\n                    <Tab eventKey=\"workers\" title=\"Workers\">\n                        {this.props.showWorkers &&\n                            <div>\n                                <span className=\"underline blue\">Add Worker</span>\n                                <div className=\"has-search mt-2\">\n                                    <span className=\"fa fa-search form-control-feedback\"></span>\n                                    <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search Workers...\" onChange={this.handleWorkerSearchChange.bind(this)} />\n                                </div>\n                                <Table responsive=\"sm\" className=\"conf-table\">\n                                    <tbody>\n\n                                        <InfiniteScroll\n                                            pageStart={0}\n                                            loadMore={this.getAllWorkers.bind(this)}\n                                            hasMore={this.state.hasMoreWorkers}\n                                            loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                                            useWindow={false}\n                                        >\n\n\n                                            {this.createTableHeader(\"worker\")}\n                                            {this.createWorkerList()}\n\n\n                                        </InfiniteScroll>\n\n\n                                    </tbody>\n                                </Table>\n\n                            </div>\n                        }\n\n                    </Tab>\n\n                </Tabs>\n\n\n\n\n\n\n\n                <button onClick={this.saveConfigOperation.bind(this)} className=\"btn btn-success btn-sm\" > Save </button>\n\n\n\n\n\n\n                {this.state.showAlert && < MyAlert alertConfig={this.state.alertConfig} showAlert={this.state.showAlert} />}\n\n            </React.Fragment>\n        );\n\n    }\n}\nexport default ConfigureOperation;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Profile.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Header.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Footer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableListHeader.js",[],{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":109,"column":17,"nodeType":"238","endLine":109,"endColumn":40},{"ruleId":"236","severity":1,"message":"237","line":119,"column":17,"nodeType":"238","endLine":119,"endColumn":40},{"ruleId":"239","severity":1,"message":"240","line":162,"column":104,"nodeType":"241","messageId":"242","endLine":162,"endColumn":106},{"ruleId":"243","severity":1,"message":"244","line":175,"column":36,"nodeType":"245","messageId":"246","endLine":175,"endColumn":38},{"ruleId":"247","severity":1,"message":"248","line":50,"column":17,"nodeType":"249","messageId":"250","endLine":50,"endColumn":24},{"ruleId":"243","severity":1,"message":"244","line":54,"column":53,"nodeType":"245","messageId":"246","endLine":54,"endColumn":55},{"ruleId":"236","severity":1,"message":"237","line":149,"column":9,"nodeType":"238","endLine":149,"endColumn":19},{"ruleId":"243","severity":1,"message":"251","line":149,"column":74,"nodeType":"245","messageId":"246","endLine":149,"endColumn":76},{"ruleId":"236","severity":1,"message":"237","line":152,"column":9,"nodeType":"238","endLine":152,"endColumn":34},{"ruleId":"239","severity":1,"message":"240","line":108,"column":110,"nodeType":"241","messageId":"242","endLine":108,"endColumn":112},{"ruleId":"239","severity":1,"message":"240","line":120,"column":116,"nodeType":"241","messageId":"242","endLine":120,"endColumn":118},{"ruleId":"243","severity":1,"message":"251","line":273,"column":60,"nodeType":"245","messageId":"246","endLine":273,"endColumn":62},{"ruleId":"247","severity":1,"message":"252","line":300,"column":11,"nodeType":"249","messageId":"250","endLine":300,"endColumn":14},{"ruleId":"243","severity":1,"message":"251","line":300,"column":82,"nodeType":"245","messageId":"246","endLine":300,"endColumn":84},{"ruleId":"243","severity":1,"message":"251","line":464,"column":61,"nodeType":"245","messageId":"246","endLine":464,"endColumn":63},{"ruleId":"236","severity":1,"message":"237","line":74,"column":9,"nodeType":"238","endLine":74,"endColumn":19},{"ruleId":"243","severity":1,"message":"251","line":101,"column":79,"nodeType":"245","messageId":"246","endLine":101,"endColumn":81},{"ruleId":"243","severity":1,"message":"251","line":102,"column":66,"nodeType":"245","messageId":"246","endLine":102,"endColumn":68},{"ruleId":"243","severity":1,"message":"251","line":104,"column":49,"nodeType":"245","messageId":"246","endLine":104,"endColumn":51},{"ruleId":"236","severity":1,"message":"237","line":127,"column":17,"nodeType":"238","endLine":127,"endColumn":27},{"ruleId":"247","severity":1,"message":"253","line":130,"column":21,"nodeType":"249","messageId":"250","endLine":130,"endColumn":28},{"ruleId":"243","severity":1,"message":"251","line":145,"column":83,"nodeType":"245","messageId":"246","endLine":145,"endColumn":85},{"ruleId":"243","severity":1,"message":"251","line":146,"column":75,"nodeType":"245","messageId":"246","endLine":146,"endColumn":77},{"ruleId":"243","severity":1,"message":"251","line":148,"column":51,"nodeType":"245","messageId":"246","endLine":148,"endColumn":53},{"ruleId":"243","severity":1,"message":"244","line":174,"column":83,"nodeType":"245","messageId":"246","endLine":174,"endColumn":85},{"ruleId":"236","severity":1,"message":"237","line":175,"column":17,"nodeType":"238","endLine":175,"endColumn":27},{"ruleId":"247","severity":1,"message":"253","line":177,"column":21,"nodeType":"249","messageId":"250","endLine":177,"endColumn":28},{"ruleId":"243","severity":1,"message":"251","line":200,"column":36,"nodeType":"245","messageId":"246","endLine":200,"endColumn":38},{"ruleId":"243","severity":1,"message":"251","line":201,"column":36,"nodeType":"245","messageId":"246","endLine":201,"endColumn":38},{"ruleId":"243","severity":1,"message":"251","line":210,"column":36,"nodeType":"245","messageId":"246","endLine":210,"endColumn":38},{"ruleId":"243","severity":1,"message":"251","line":211,"column":36,"nodeType":"245","messageId":"246","endLine":211,"endColumn":38},{"ruleId":"243","severity":1,"message":"251","line":227,"column":32,"nodeType":"245","messageId":"246","endLine":227,"endColumn":34},{"ruleId":"243","severity":1,"message":"251","line":228,"column":32,"nodeType":"245","messageId":"246","endLine":228,"endColumn":34},{"ruleId":"243","severity":1,"message":"251","line":230,"column":45,"nodeType":"245","messageId":"246","endLine":230,"endColumn":47},{"ruleId":"243","severity":1,"message":"251","line":231,"column":45,"nodeType":"245","messageId":"246","endLine":231,"endColumn":47},{"ruleId":"243","severity":1,"message":"251","line":245,"column":32,"nodeType":"245","messageId":"246","endLine":245,"endColumn":34},{"ruleId":"243","severity":1,"message":"251","line":246,"column":32,"nodeType":"245","messageId":"246","endLine":246,"endColumn":34},{"ruleId":"243","severity":1,"message":"251","line":248,"column":41,"nodeType":"245","messageId":"246","endLine":248,"endColumn":43},{"ruleId":"243","severity":1,"message":"251","line":249,"column":41,"nodeType":"245","messageId":"246","endLine":249,"endColumn":43},"no-native-reassign",["254"],"no-negated-in-lhs",["255"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'pattern' is already defined.","Identifier","redeclared","Expected '===' and instead saw '=='.","'obj' is already defined.","'tmpCost' is already defined.","no-global-assign","no-unsafe-negation"]