[{"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/index.js":"1","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/reportWebVitals.js":"2","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Login.js":"3","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Dashboard.js":"4","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Constants.js":"5","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Quote.js":"6","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Header.js":"7","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteList.js":"8","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteDetail.js":"9","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Routes.js":"10","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Footer.js":"11","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/AdminDashboard.js":"12","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInventory.js":"13","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditInventory.js":"14","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageOperations.js":"15","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditOperations.js":"16","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Utils.js":"17","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageWorker.js":"18","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditWorker.js":"19","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageProjects.js":"20","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditProject.js":"21","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageCustomer.js":"22","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditCustomer.js":"23","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInspections.js":"24","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/auth.service.js":"25","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/admin.service.js":"26","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Upload.js":"27","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/user.service.js":"28","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ForgotPassword.js":"29","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditQuote.js":"30","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageQuote.js":"31","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/MyAlert.js":"32","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Popup.js":"33","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Sidebar.js":"34","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerDashboard.js":"35","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerOperations.js":"36","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerProjects.js":"37","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerTimesheet.js":"38","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ToolsList.js":"39","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Checkbox.js":"40","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/OperationList.js":"41","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ConfigureOperation.js":"42","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableRow.js":"43","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableHeader.js":"44","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Profile.js":"45","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/worker.service.js":"46"},{"size":410,"mtime":1630695188461,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1611647184538,"results":"49","hashOfConfig":"48"},{"size":5251,"mtime":1634192907024,"results":"50","hashOfConfig":"48"},{"size":3194,"mtime":1633722040605,"results":"51","hashOfConfig":"48"},{"size":574,"mtime":1631563677734,"results":"52","hashOfConfig":"48"},{"size":11515,"mtime":1633731384011,"results":"53","hashOfConfig":"48"},{"size":2174,"mtime":1633712784064,"results":"54","hashOfConfig":"48"},{"size":5339,"mtime":1633712834946,"results":"55","hashOfConfig":"48"},{"size":23169,"mtime":1633722179358,"results":"56","hashOfConfig":"48"},{"size":1216,"mtime":1625797895746,"results":"57","hashOfConfig":"48"},{"size":358,"mtime":1633670299323,"results":"58","hashOfConfig":"48"},{"size":2611,"mtime":1630695262470,"results":"59","hashOfConfig":"48"},{"size":9611,"mtime":1633825623200,"results":"60","hashOfConfig":"48"},{"size":8248,"mtime":1633025601798,"results":"61","hashOfConfig":"48"},{"size":8845,"mtime":1633825510209,"results":"62","hashOfConfig":"48"},{"size":12509,"mtime":1633587027658,"results":"63","hashOfConfig":"48"},{"size":1032,"mtime":1631596646493,"results":"64","hashOfConfig":"48"},{"size":9037,"mtime":1634244436657,"results":"65","hashOfConfig":"48"},{"size":9959,"mtime":1633587317858,"results":"66","hashOfConfig":"48"},{"size":9680,"mtime":1633825363023,"results":"67","hashOfConfig":"48"},{"size":12749,"mtime":1633674730853,"results":"68","hashOfConfig":"48"},{"size":7719,"mtime":1633128780248,"results":"69","hashOfConfig":"48"},{"size":7103,"mtime":1633365274940,"results":"70","hashOfConfig":"48"},{"size":12076,"mtime":1634188627835,"results":"71","hashOfConfig":"48"},{"size":2731,"mtime":1634679741406,"results":"72","hashOfConfig":"48"},{"size":12582,"mtime":1634188439896,"results":"73","hashOfConfig":"48"},{"size":1372,"mtime":1623734059427,"results":"74","hashOfConfig":"48"},{"size":3536,"mtime":1633720933186,"results":"75","hashOfConfig":"48"},{"size":5628,"mtime":1634680323468,"results":"76","hashOfConfig":"48"},{"size":22660,"mtime":1634188919543,"results":"77","hashOfConfig":"48"},{"size":8231,"mtime":1634186177677,"results":"78","hashOfConfig":"48"},{"size":386,"mtime":1630692468135,"results":"79","hashOfConfig":"48"},{"size":2365,"mtime":1633410655147,"results":"80","hashOfConfig":"48"},{"size":3269,"mtime":1630693936976,"results":"81","hashOfConfig":"48"},{"size":1779,"mtime":1630653254288,"results":"82","hashOfConfig":"48"},{"size":5826,"mtime":1631562561761,"results":"83","hashOfConfig":"48"},{"size":6059,"mtime":1631562700034,"results":"84","hashOfConfig":"48"},{"size":562,"mtime":1626152776745,"results":"85","hashOfConfig":"48"},{"size":4472,"mtime":1627573905514,"results":"86","hashOfConfig":"48"},{"size":369,"mtime":1626846725760,"results":"87","hashOfConfig":"48"},{"size":3091,"mtime":1627619563041,"results":"88","hashOfConfig":"48"},{"size":12114,"mtime":1633674526888,"results":"89","hashOfConfig":"48"},{"size":1725,"mtime":1633497033896,"results":"90","hashOfConfig":"48"},{"size":563,"mtime":1630692946468,"results":"91","hashOfConfig":"48"},{"size":6883,"mtime":1633713255765,"results":"92","hashOfConfig":"48"},{"size":854,"mtime":1633412482247,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"oxb9l2",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"96"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"96"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"96"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"96"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/index.js",[],["202","203"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/reportWebVitals.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Login.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Dashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Constants.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Quote.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Header.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteList.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteDetail.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Routes.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Footer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/AdminDashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInventory.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditInventory.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageOperations.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditOperations.js",["204","205","206","207","208","209"],"import React, { Component } from 'react';\nimport AdminService from \"../services/admin.service\";\n\nclass EditOperations extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: [],\n            toolsList: [],\n            selectedTool: {},\n            errors: {},\n            hasMoreItems: true,\n            pageNo: 0\n        }\n        if(this.props.selectedId) this.getOperationById();\n       this.getAllTools();\n        //this.getAllWorkers();\n    }\n    getOperationById() {\n        \n            AdminService.getOperationById(this.props.selectedId).then(\n                response => {\n                    this.setState({\n                        item: response.data\n                    });\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n         \n    }\n    getAllTools() {\n        AdminService.getAllInventory(this.state.pageNo).then(\n            response => {\n                if(response){\n                    var tmpListitems = [...this.state.toolsList, ...response.data.rows];\n                    this.setState({\n                        toolsList: tmpListitems,\n                        pageNo: this.state.pageNo+1\n                    });\n                    if(this.state.pageNo >= response.data.currentPage) {\n                        this.setState({\n                            hasMoreItems: false\n                        });\n                    }\n                }\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    /*getAllWorkers() {\n        AdminService.getAllWorkers().then(\n            response => {\n                this.setState({\n                    workerList: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    } */\n\n    handleChange(propertyName, event) {\n        if(event.target.type === 'number') {\n            event.target.value = Math.abs(event.target.value);\n        }\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    handleToolSelection(event) {\n        var selectedTool = this.state.toolsList.find(o => o.id == event.target.value);\n        var newToolItem = {\n            \"Inventories\": selectedTool,\n            \"req_avail\": this.state.item.toolRequired\n        };\n        this.setState({ selectedTool: newToolItem });\n    }\n    /*handleWorkerSelection(event) {\n        this.state.selectedWorker = this.state.workerList.find(o => o.id == event.target.value);\n    }*/\n\n\n    addTools(event) {\n        if (!this.state.selectedTool.Inventories || !this.state.item.toolRequired) {\n            let errors = {};\n            if (!this.state.selectedTool.Inventories) {\n                errors[\"selectTool\"] = \"Please select inventory.\";\n            }\n            if (!this.state.item.toolRequired) {\n                errors[\"toolRequired\"] = \"Please enter required quantity.\";\n            }\n            this.setState({\n                errors: errors\n            });\n\n        } else {\n            this.setState({\n                errors: {}\n            });\n\n            if (this.state.item.id) {\n\n                this.state.selectedTool['req_avail'] = this.state.item.toolRequired;\n                var selectedOperation = this.state.item;\n                selectedOperation.OperationInventories.push(this.state.selectedTool);\n                this.setState({ item: selectedOperation });\n            } else {\n                var selectedOperation = this.state.item;\n                if (!selectedOperation.OperationInventories) {\n                    selectedOperation['OperationInventories'] = [];\n                }\n                var required_qty = this.state.item.toolRequired;\n                this.state.selectedTool['req_avail'] = required_qty;\n\n                selectedOperation.OperationInventories.push(this.state.selectedTool);\n                this.setState({ item: selectedOperation });\n            }\n        }\n    }\n    /*addWorker(event) {\n        if (this.state.item.id) {\n            this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n            this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n            var selectedOperation = this.state.item;\n            selectedOperation.OperationWorkers.push(this.state.selectedWorker);\n            this.setState({ item: selectedOperation });\n        } else {\n            var selectedOperation = this.state.item;\n            if (!selectedOperation.OperationWorkers) {\n                selectedOperation['OperationWorkers'] = [];\n            }\n            this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n            this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n\n            selectedOperation.OperationWorkers.push(this.state.selectedWorker);\n            this.setState({ item: selectedOperation });\n        }\n\n    }*/\n    validateForm() {\n        let errors = {};\n        let isValid = true;\n        if (!this.state.item.name) {\n            isValid = false;\n            errors[\"name\"] = \"Please enter operation name.\";\n        }\n        this.setState({\n            errors: errors\n        });\n        return isValid;\n\n    }\n    saveOperation() {\n        if (this.validateForm()) {\n            var tmpInvobj = [];\n            this.state.item.OperationInventories && this.state.item.OperationInventories.map((item, i) => {\n                if (item.Inventories.id) {\n                    var invobj = {};\n                    invobj[\"id\"] = item.Inventories.id;\n                    invobj[\"required_qty\"] = item.req_avail;\n                    tmpInvobj.push(invobj);\n                }\n            });\n            var data = {\n                \"name\": this.state.item.name,\n                \"desc\": this.state.item.desc,\n                \"items\": tmpInvobj\n            };\n            if (this.state.item.id != undefined) {\n                AdminService.editOperation(this.state.item.id, data).then(\n                    response => {\n                        this.props.parentCallback(response);\n                    },\n                    error => {\n                        console.log(\"Error\");\n                    }\n                );\n            } else {\n                AdminService.createOperation(data).then(\n                    response => {\n                        this.props.parentCallback(response);\n                    },\n                    error => {\n                        console.log(\"Error\");\n                    }\n                );\n            }\n\n        }\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    renderToolsList() {\n        return (\n            <div className=\"col\">\n                <div className=\"row\">\n                    <div className=\"col-6\"><span>Tools and Materials</span></div>\n                    <div className=\"col-6\"><span>Required</span></div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <select className=\"form-control\" onChange={this.handleToolSelection.bind(this)}>\n                            <option>Select Tools</option>\n                            {this.state.toolsList && this.state.toolsList.map((toolItem) => (\n                                <option key={toolItem.id} value={toolItem.id}>{toolItem.itemName}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"col-6\">\n                        <input type=\"number\" min = \"1\" className=\"form-control col-6 d-inline\" onChange={this.handleChange.bind(this, 'toolRequired')} />\n                        <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4 d-inline\" onClick={this.addTools.bind(this)}>Add</button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col text-danger\">{this.state.errors.selectTool}</div>\n                    <div className=\"col text-danger\">{this.state.errors.toolRequired}</div>\n                </div>\n                <div className=\"row mt-1 quote-req-header font-weight-bold\">\n                    <div className=\"col-sm\">\n                        <label>Tool/Material Name</label>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label>Required</label>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label>Availability</label>\n                    </div>\n                </div>\n                {this.state.item.OperationInventories && this.state.item.OperationInventories.map((item) => (\n\n                    <div className=\"row mt-1\">\n                        <div className=\"col-sm\">\n                            <label>{item.Inventories && item.Inventories.itemName}</label>\n                        </div>\n                        <div className=\"col-sm\">\n                            <label>{item.req_avail}</label>\n                        </div>\n                        <div className=\"col-sm\">\n                            <label>{item.Inventories && item.Inventories.availability}</label>\n                        </div>\n                    </div>\n\n                ))}\n            </div>\n\n        );\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.state.item &&\n                    <div className=\"col edit-inventory\">\n                        <div className=\"list-group-header section-header row\">\n                            <div className=\"col-4\">\n\n                                <nav aria-label=\"breadcrumb\">\n                                    <ul className=\"breadcrumb\">\n                                        <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                            <span className=\"mb-1 underline\">Manage</span>\n                                            <span className=\"mb-1 blue-color pl-2\">Operation</span>\n                                        </li>\n                                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                            <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                            <span className=\"mb-1 blue-color pl-2\">Operation</span>\n                                        </li>\n                                    </ul>\n                                </nav>\n\n                            </div>\n                            <div className=\"col-8 text-right\">\n                                <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                                <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveOperation()}>Save</button>\n                            </div>\n                        </div>\n\n                        <div className=\"blue-box-div row\">\n                            <div className=\"col-4 white-border-right\">\n                                <div>\n                                    <span>Operation Name</span>\n                                    <input type=\"text\"\n                                        className=\"form-control\" defaultValue={this.state.item.name}\n                                        onChange={this.handleChange.bind(this, 'name')} />\n                                    <div className=\"text-danger\">{this.state.errors.name}</div>\n                                </div>\n                                <div>\n                                    <span>Description</span>\n                                    <textarea className=\"form-control\" rows=\"3\"\n                                        defaultValue={this.state.item.desc}\n                                        onChange={this.handleChange.bind(this, 'desc')}></textarea>\n                                </div>\n                            </div>\n                            {this.renderToolsList()}\n                        </div>\n                    </div>\n                }\n\n            </React.Fragment>\n        );\n    }\n}\nexport default EditOperations;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Utils.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageWorker.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditWorker.js",["210","211"],"import React, { Component } from 'react';\n\nimport AdminService from \"../services/admin.service\";\n\nclass EditWorker extends Component {\n    state = {\n        item: this.props.selectedItem,\n        editWorkerPage: this.props.editWorkerPage,\n        errors: {}\n    }\n    handleChange(propertyName, event) {\n        if(event.target.type === 'number') {\n            event.target.value = Math.abs(event.target.value);\n        }\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    saveWorker() {\n        if (this.state.item.id !== undefined) {\n            this.editWorker();\n        } else {\n            this.createWorker();\n        }\n\n    }\n    validateForm() {\n        let errors = {};\n        let isValid = true;\n        if (!this.state.item.name) {\n            isValid = false;\n            errors[\"name\"] = \"Please enter your name.\";\n        }\n        if (!this.state.item.email) {\n            isValid = false;\n            errors[\"email\"] = \"Please enter your email Address.\";\n        }\n        if (typeof this.state.item.email !== \"undefined\") {\n            var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n            if (!pattern.test(this.state.item.email)) {\n                isValid = false;\n                errors[\"email\"] = \"Please enter valid email address.\";\n            }\n        }\n        if (!this.state.item.phone) {\n            isValid = false;\n            errors[\"phone\"] = \"Please enter your phone number.\";\n        }\n        if (typeof this.state.item.phone !== \"undefined\") {\n            var pattern = new RegExp(/^[0-9\\b]+$/);\n            if (!pattern.test(this.state.item.phone)) {\n                isValid = false;\n                errors[\"phone\"] = \"Please enter only number.\";\n            } else if (this.state.item.phone.length != 10) {\n                isValid = false;\n                errors[\"phone\"] = \"Please enter valid phone number.\";\n            }\n        }\n\n        this.setState({\n            errors: errors\n        });\n        return isValid;\n\n    }\n    editWorker() {\n        if(this.validateForm()) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"phone\": this.state.item.phone,\n                \"address\": this.state.item.address,\n                \"email\": this.state.item.email,\n                \"avail_per_day\": this.state.item.avail_per_day,\n                \"cost_per_hr\": this.state.item.cost_per_hr,\n                \"total_avail_per_week\": this.state.item.total_avail_per_week,\n                \"professionId\": this.state.item.professionId\n            };\n            AdminService.editWorker(this.state.item.id, data).then(\n                response => {\n                    this.props.parentCallback(response);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n    createWorker() {\n        if(this.validateForm()) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"phone\": this.state.item.phone,\n                \"address\": this.state.item.address,\n                \"email\": this.state.item.email,\n                \"avail_per_day\": this.state.item.avail_per_day,\n                \"cost_per_hr\": this.state.item.cost_per_hr,\n                \"total_avail_per_week\": this.state.item.total_avail_per_week,\n                \"professionId\": this.state.item.professionId\n            };\n\n            AdminService.createWorker(data).then(\n                response => {\n                    this.props.parentCallback(response);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"col edit-worker\">\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col-4\">\n\n                            <nav aria-label=\"breadcrumb\">\n                                <ul className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                        <span className=\"mb-1 underline\">Manage</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Worker</span>\n                                    </li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                        <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Worker</span>\n                                    </li>\n                                </ul>\n                            </nav>\n\n                        </div>\n                        <div className=\"col-8 text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                            <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveWorker()}>Save</button>\n                        </div>\n                    </div>\n\n                    <div className=\"blue-box-div row\">\n                        <div className=\"col white-border-right\">\n                            <div>\n                                <span>Worker Name</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.name}\n                                    onChange={this.handleChange.bind(this, 'name')} />\n                                <div className=\"text-danger\">{this.state.errors.name}</div>\n                            </div>\n                            <div>\n                                <span>Phone</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.phone}\n                                    onChange={this.handleChange.bind(this, 'phone')} />\n                                <div className=\"text-danger\">{this.state.errors.phone}</div>\n                            </div>\n                            <div>\n                                <span>Address</span>\n                                <textarea className=\"form-control\" rows=\"3\"\n                                    defaultValue={this.state.item.address}\n                                    onChange={this.handleChange.bind(this, 'address')}></textarea>\n\n                            </div>\n                            <div>\n                                <span>Email</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.email}\n                                    onChange={this.handleChange.bind(this, 'email')} />\n                                <div className=\"text-danger\">{this.state.errors.email}</div>\n                            </div>\n                            <div>\n                                <span>Available per Day</span>\n                                <input type=\"number\"\n                                    className=\"form-control\" defaultValue={this.state.item.avail_per_day}\n                                    onChange={this.handleChange.bind(this, 'avail_per_day')} />\n                            </div>\n                            <div>\n                                <span>Cost per Hour</span>\n                                <input type=\"number\"\n                                    className=\"form-control\" defaultValue={this.state.item.cost_per_hr}\n                                    onChange={this.handleChange.bind(this, 'cost_per_hr')} />\n                            </div>\n                            <div>\n                                <span>Total Avalability per Week</span>\n                                <input type=\"number\"\n                                    className=\"form-control\" defaultValue={this.state.item.total_avail_per_week}\n                                    onChange={this.handleChange.bind(this, 'total_avail_per_week')} />\n                            </div>\n                            <div>\n                                <span>Profession</span>\n                                <select className=\"form-control\" defaultValue={this.state.item.professionId} onChange={this.handleChange.bind(this, 'professionId')} >\n                                    <option selected>Select a Profession</option>\n                                    <option value=\"1\">Engineer</option>\n                                    <option value=\"2\">Painter</option>\n                                </select>\n                            </div>\n\n                        </div>\n                        <div className=\"col\">\n                            <span> {this.state.item.operations_tagged ? 'Operatios Tagged' : 'No Operatios Tagged'}</span>\n                            <div>\n                                {this.state.item.operations_tagged && this.state.item.operations_tagged.map((operation, index) => (\n                                    <span className=\"badge tool-badge\">Operation {index + 1} - {operation}</span>\n                                )\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\nexport default EditWorker;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageProjects.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditProject.js",["212","213","214"],"import React, { Component } from 'react';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AdminService from \"../services/admin.service\";\nimport Popup from \"../components/Popup\";\n\nclass EditProject extends Component {\n    constructor(props) {\n        super(props);\n        this.getAllWorkers();\n        this.getSingleProject();\n    }\n    state = {\n        item: {},\n        workerList: [],\n        selectedWorker: {},\n        popupConfig: {},\n        isPopupOpen: false,\n        errors: {},\n        hasMoreItems: true,\n        pageNo: 0\n    }\n    getSingleProject = () => {\n        AdminService.getSingleProject(this.props.selectedId).then(\n          response => {\n            if (response) {\n              this.setState({\n                item: response.data\n              });\n            }\n          },\n          error => {\n            console.log(\"Error\");\n          }\n        );\n      };\n    handleChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    handleDateChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = new Date(event);\n        this.setState({ item: item });\n    }\n    handleClose = () => {\n        this.setState({\n            isPopupOpen: false\n        });\n    }\n    showPopupMessage(message) {\n        this.setState({\n            isPopupOpen: true,\n            popupConfig: {\n                header: \"Message\",\n                body: message,\n                type: \"message\"\n            }\n        });\n    }\n    validateForm() {\n        let errors = {};\n        let isValid = true;\n        \n        if (!this.state.item.name) {\n            isValid = false;\n            errors[\"name\"] = \"Please enter project name.\";\n        }\n        this.setState({\n            errors: errors\n        });\n        return isValid;\n    }\n\n    saveProject() {\n        if(this.validateForm()) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"desc\": this.state.item.desc,\n                \"startDate\": this.state.item.start_date,\n                \"endDate\": this.state.item.end_date,\n                \"workers\": this.state.item.workers\n            };\n            AdminService.editProject(this.state.item.id, data).then(\n                response => {\n                    // this.showPopupMessage(response.data.message);\n                    this.props.parentCallback(response);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    getAllWorkers() {\n        AdminService.getAllWorkers(this.state.pageNo).then(\n            response => {\n                if(response) {\n                    var tmpListitems = [];\n                    if(response.data.currentPage !== 0 ){\n                        tmpListitems = [...this.state.workerList, ...response.data.rows];\n                    } else {\n                        tmpListitems = response.data.rows;\n                    }\n                    this.setState({\n                        workerList: tmpListitems,\n                        pageNo: this.state.pageNo+1\n                    });\n\n                    if(this.state.pageNo >= response.data.currentPage) {\n                        this.setState({\n                            hasMoreItems: false\n                        });\n                    }\n                } \n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n\n    statusChange(event) {\n        var data = {\n            \"status\": \"CLOSED\"\n        };\n        AdminService.changeProjectStatus(this.state.item.id, data).then(\n            response => {\n                this.showPopupMessage(response.data.message);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    handleWorkerSelection(event) {\n        this.state.selectedWorker = this.state.workerList.find(o => o.id == event.target.value);\n    }\n    addWorker(event) {\n        this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n        //this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n        var selectedProject = this.state.item;\n        if (!selectedProject.workers) {\n            selectedProject['workers'] = [];\n        }\n        selectedProject.workers.push(this.state.selectedWorker);\n        this.setState({ item: selectedProject });\n        console.log(this.state.item);\n\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"col edit-inventory\">\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col-4\">\n\n                            <nav aria-label=\"breadcrumb\">\n                                <ul className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                        <span className=\"mb-1 underline\">Manage</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Project</span>\n                                    </li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                        <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Project</span>\n                                    </li>\n                                </ul>\n                            </nav>\n\n                        </div>\n                        <div className=\"col-8 text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                            <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveProject()}>Save</button>\n                        </div>\n                    </div>\n\n                    <div className=\"blue-box-div row\">\n                        <div className=\"col white-border-right\">\n                            <div>\n                                <span>Project Name</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.name}\n                                    onChange={this.handleChange.bind(this, 'name')} />\n                                <div className=\"text-danger\">{this.state.errors.name}</div>\n                            </div>\n                            <div>\n                                <span>Description</span>\n                                <textarea className=\"form-control\" rows=\"3\"\n                                    defaultValue={this.state.item.desc}\n                                    onChange={this.handleChange.bind(this, 'desc')}></textarea>\n                            </div>\n<div>\n                                <span>Start Date</span>\n                                <DatePicker\n                                    selected={this.state.item.start_date && new Date(this.state.item.start_date)}\n                                    onChange={this.handleDateChange.bind(this, 'start_date')}\n                                    className=\"form-control\"\n                                    minDate={new Date()}\n                                />\n                            </div>\n                            <div>\n                                <span>End Date</span>\n                                <DatePicker\n                                    selected={this.state.item.end_date && new Date(this.state.item.end_date)}\n                                    onChange={this.handleDateChange.bind(this, 'end_date')}\n                                    className=\"form-control\"\n                                    minDate={new Date(this.state.item.start_date)}\n                                />\n                            </div>\n\n                        </div>\n\n                        <div className=\"col\">\n\n\n                            <div className=\"row\">\n                                <div className=\"col\"><span>Worker</span></div>\n                                <div className=\"col\"><span>Required Hours</span></div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <select className=\"form-control\" onChange={this.handleWorkerSelection.bind(this)}>\n                                        <option selected>Select Worker</option>\n                                        {this.state.workerList.map((item) => (\n                                            <option key={item.id} value={item.id}>{item.name}</option>\n                                        ))}\n                                    </select>\n                                </div>\n\n                                <div className=\"col\">\n                                    <input type=\"number\" className=\"form-control col-2 d-inline\" onChange={this.handleChange.bind(this, 'workerRequired')} />\n                                    <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4 d-inline\" onClick={this.addWorker.bind(this)}>Add</button>\n                                </div>\n\n                            </div>\n\n                            <div className=\"row mt-1 quote-req-header font-weight-bold\">\n                                <div className=\"col-sm\">\n                                    <label>Name</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Profession</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Available per day </label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Required Hours</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Cost per hour</label>\n                                </div>\n                                <div className=\"col-sm\">\n                                    <label>Estimated Cost</label>\n                                </div>\n                            </div>\n\n                            {this.state.item.workers && this.state.item.workers.map(listitem => (\n\n                                <div className=\"row mt-1\" >\n                                    <div className=\"col-sm\" >\n                                        <label className=\"description-truncate text-truncate\">{listitem.name}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.name}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.avail_per_day}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.required_hrs}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.cost_per_hr}</label>\n                                    </div>\n                                    <div className=\"col-sm\" >\n                                        <label>{listitem.cost_per_hr * listitem.required_hrs}</label>\n                                    </div>\n                                </div>\n                            ))}\n\n                           \n\n\n\n\n\n                            <div className=\"row\">\n                                <button type=\"button\" className=\"btn btn-green btn-sm m-4 pr-4 pl-4 d-inline\" onClick={this.statusChange.bind(this)}>Project Completed</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <Popup popupConfig={this.state.popupConfig} openFlag={this.state.isPopupOpen} parentCloseCallback={this.handleClose} ></Popup>\n            </React.Fragment>\n        );\n    }\n}\nexport default EditProject;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageCustomer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditCustomer.js",["215","216"],"import React, { Component } from 'react';\nimport AdminService from \"../services/admin.service\";\nimport AuthService from \"../services/auth.service\";\n\nclass EditCustomer extends Component {\n    state = {\n        item: this.props.selectedItem,\n        editCustomerPage: this.props.editCustomerPage,\n        errors: {}\n    }\n    handleChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    saveCustomer() {\n        if(this.validateForm()) {\n            if(this.state.item.id) {\n                this.editCustomer();\n            } else {\n                this.createNewCustomer();\n            }\n            \n        }\n    }\n    validateForm() {\n        let errors = {};\n        let isValid = true;\n        \n        if (!this.state.item.name) {\n            isValid = false;\n            errors[\"name\"] = \"Please enter customer name.\";\n        }\n        if (!this.state.item.email) {\n            isValid = false;\n            errors[\"email\"] = \"Please enter your email Address.\";\n        }\n        if (typeof this.state.item.email !== \"undefined\") {\n            var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n            if (!pattern.test(this.state.item.email)) {\n                isValid = false;\n                errors[\"email\"] = \"Please enter valid email address.\";\n            }\n        }\n        if (!this.state.item.phone) {\n            isValid = false;\n            errors[\"phone\"] = \"Please enter your phone number.\";\n        }\n        if (typeof this.state.item.phone !== \"undefined\") {\n            var pattern = new RegExp(/^[0-9\\b]+$/);\n            if (!pattern.test(this.state.item.phone)) {\n                isValid = false;\n                errors[\"phone\"] = \"Please enter only number.\";\n            } else if (this.state.item.phone.length != 10) {\n                isValid = false;\n                errors[\"phone\"] = \"Please enter valid phone number.\";\n            }\n        }\n        this.setState({\n            errors: errors\n        });\n        return isValid;\n    }\n    editCustomer() {\n        var data = {\n            \"name\": this.state.item.name,\n            \"email\": this.state.item.email,\n            \"phone\": this.state.item.phone,\n            \"address\" : this.state.item.address\n        };\n\n        AdminService.editCustomer(this.state.item.id, data).then(\n            response => {\n                this.props.parentCallback(response);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        ); \n    }\n    createNewCustomer() {\n        var data = {\n            \"name\": this.state.item.name,\n            \"email\": this.state.item.email,\n            \"phone\": this.state.item.phone,\n            \"address\" : this.state.item.address\n        };\n\n        AuthService.createCustomer(data).then(\n            response => {\n                this.props.parentCallback(response);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"col edit-customer\">\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col-4\">\n\n                            <nav aria-label=\"breadcrumb\">\n                                <ul className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                        <span className=\"mb-1 underline\">Manage</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Customer</span>\n                                    </li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                        <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Customer</span>\n                                    </li>\n                                </ul>\n                            </nav>\n\n                        </div>\n                        <div className=\"col-8 text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                            <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveCustomer()}>Save</button>\n                        </div>\n                    </div>\n\n                    <div className=\"blue-box-div row\">\n                        <div className=\"col\">\n                            <div>\n                                <span>Customer Name</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.name}\n                                    onChange={this.handleChange.bind(this, 'name')} />\n                                <div className=\"text-danger\">{this.state.errors.name}</div>\n                            </div>\n                            <div>\n                                <span>Phone</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.phone}\n                                    onChange={this.handleChange.bind(this, 'phone')} />\n                                <div className=\"text-danger\">{this.state.errors.phone}</div>\n                            </div>\n                            <div>\n                                <span>Address</span>\n                                <textarea className=\"form-control\" rows=\"3\"\n                                    defaultValue={this.state.item.address}\n                                    onChange={this.handleChange.bind(this, 'address')}></textarea>\n                            \n                            </div>\n                            <div>\n                                <span>Email</span>\n                                <input type=\"text\" readOnly = {this.state.item.id ? true : false }\n                                    className=\"form-control\" defaultValue={this.state.item.email}\n                                    onChange={this.handleChange.bind(this, 'email')} />\n                                <div className=\"text-danger\">{this.state.errors.email}</div>\n                            </div>\n                            \n                            \n                        </div>\n                       \n\n                    </div>\n\n\n\n                </div>\n\n\n            </React.Fragment>\n        );\n    }\n}\nexport default EditCustomer;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInspections.js",["217"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/auth.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/admin.service.js",["218","219"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Upload.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/user.service.js",["220"],"import axios from 'axios';\n\nconst API_URL = \"https://funetus-api.herokuapp.com/\";\n\nclass UserService {\n\n    getAllQuotes(pageNo) {\n        var config = {\n            method: 'get',\n            url: API_URL + 'quotes' +'?page='+pageNo\n        };\n\n        return axios(config)\n            .then(function (response) {\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    getSingleQuote(quoteId) {\n        var config = {\n            method: 'get',\n            url: API_URL + 'quotes/' + quoteId\n        };\n\n        return axios(config)\n            .then(function (response) {\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    createQuote(data) {\n        var config = {\n            method: 'post',\n            url: API_URL + 'quotes',\n            data: data\n        };\n        return axios(config)\n            .then(function (response) {\n                console.log(response);\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    editQuote(quoteId, data) {\n        var config = {\n            method: 'put',\n            url: API_URL + 'quotes/' + quoteId,\n            data: data\n        };\n        return axios(config)\n            .then(function (response) {\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    deleteQuote(quoteId) {\n        var config = {\n            method: 'DELETE',\n            url: API_URL + 'quotes/' + quoteId\n        };\n\n        return axios(config)\n            .then(function (response) {\n                return response;\n            })\n            .catch(function (error) {\n                return({message: error.message});\n            });\n    }\n\n    changeStatus(id, data) {\n        var config = {\n            method: 'post',\n            url: API_URL + 'quotes/'+ id +'/changeStatus',\n            data: data\n        };\n        return axios(config)\n            .then(function (response) {\n                console.log(response);\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    savePOUrl(id, data) {\n        var config = {\n            method: 'post',\n            url: API_URL + 'quotes/submitPOUrl/'+ id ,\n            data: data\n        };\n        return axios(config)\n            .then(function (response) {\n                console.log(response);\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    getSingleCustomer() {\n        var config = {\n            method: 'get',\n            url: API_URL + 'user'\n        };\n\n        return axios(config)\n            .then(function (response) {\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    updateUserProfile(data) {\n        var config = {\n            method: 'put',\n            url: API_URL + 'user',\n            data: data\n        };\n\n        return axios(config)\n            .then(function (response) {\n                return response;\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n}\n\nexport default new UserService();","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ForgotPassword.js",["221","222"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditQuote.js",["223","224","225","226","227"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageQuote.js",["228","229"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/MyAlert.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Popup.js",["230"],"import React from 'react';\nimport { Button } from 'reactstrap';\nimport Modal from \"react-bootstrap/Modal\";\nimport ForgotPassword from \"../common/ForgotPassword\";\nimport OperationList from \"../common/OperationList\";\nimport ConfigureOperation from \"../common/ConfigureOperation\";\nimport Profiile from \"../common/Profile\";\n\nclass Popup extends React.Component {\n\n  callback = (list) => {\n    this.props.parentCloseCallback(list);\n  }\n\n  renderPopupBody() {  \n    switch(this.props.popupConfig.type) {\n      case 'forgotPassword':\n        return <ForgotPassword popupClose={this.props.parentCloseCallback}></ForgotPassword>;\n      case 'toolsList':\n        return <ConfigureOperation showTools={true} popupClose={this.callback}></ConfigureOperation>;\n      case 'workerList':\n        return <ConfigureOperation showWorkers={true} popupClose={this.callback}></ConfigureOperation>;\n      case 'configureOperation':\n        return <ConfigureOperation showTools={true} showWorkers={true} popupClose={this.callback}></ConfigureOperation>;\n      case 'operationList':\n        return <OperationList popupClose={this.callback}></OperationList>;\n      case 'image':\n        return <div class=\"container\"> \n        <iframe class=\"responsive-iframe\"  src={this.props.popupConfig.body}  height=\"1000\" width=\"1000\"></iframe>\n      </div>;\n      case 'profile':\n          return <Profiile></Profiile> ;\n        default:\n        return this.props.popupConfig.body;\n    }\n  };\n  getClassName() {\n    switch(this.props.popupConfig.type) {\n      case 'configureOperation':\n        return 'confCntr';\n      case 'image':\n        return 'imgCntr';\n      default:\n        return '';\n    }\n  };\n\n  render() {\n    const popupConfigType = this.props.popupConfig.type;\n    let button;\n    if (popupConfigType === \"confirmation\") {\n      button = <Button color=\"success\" onClick={this.props.parentConfirmCallback}>Confirm Delete</Button>;\n    } \n    return (\n      <Modal show={this.props.openFlag} onHide={this.props.parentCloseCallback}  className={this.getClassName()}>\n        <Modal.Header closeButton>\n          <Modal.Title>{this.props.popupConfig.header}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body >\n        { this.renderPopupBody() }\n        </Modal.Body>\n        <Modal.Footer>\n          {button}\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\nexport default Popup;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Sidebar.js",["231"],"import React, { Component } from 'react';\nclass Sidebar extends Component {\n\n    \n    constructor(props) {\n        super(props); \n        this.state = {\n            activeLink: 1,\n            leftMenu: []\n        } \n        this.selectMenu();\n    }\n    selectMenu() {\n        var adminFlag = JSON.parse(localStorage.getItem('user')).admin;\n        var menu = [];\n        if (adminFlag) {\n            menu = [\n                {\n                    id: 1,\n                    name: \"Quotes\",\n                    className: \"nav-quote-req\" \n                },\n                {\n                    id: 2,\n                    name: \"Projects \",\n                    className: \"nav-projects \"\n                },\n                {\n                    id: 3,\n                    name: \"Operations\",\n                    className: \"nav-operations\"\n                },\n                {\n                    id: 4,\n                    name: \"Inventory\",\n                    className: \"nav-inventory\"\n                },\n                {\n                    id: 5,\n                    name: \"Worker\",\n                    className: \"nav-workers\"\n                },\n                {\n                    id: 6,\n                    name: \"Customer\",\n                    className: \"nav-customer\"\n                },\n                {\n                    id: 7,\n                    name: \"Inspection\",\n                    className: \"nav-inspection\"\n                }\n            ];\n           \n        } else {\n             menu = [\n                {\n                    id: 1,\n                    name: \"Projects \",\n                    className: \"nav-projects \"\n                },\n                {\n                    id: 2,\n                    name: \"Operations\",\n                    className: \"nav-operations\"\n                },\n                {\n                    id: 3,\n                    name: \"Schedule\",\n                    className: \"nav-schedule\"\n                }\n            ];\n        }\n        this.state.leftMenu = menu\n    }\n    selectMenuItem(id) {\n        this.setState({ activeLink: id });\n        this.props.onClick(id);\n    }\n\n\n    render() {\n        \n        const { leftMenu, activeLink } = this.state;\n        return (\n            <React.Fragment>\n\n                    <div className=\"sidebar-div\">\n                        <ul className=\"nav flex-column\">\n                            {leftMenu && leftMenu.map(item => {\n                                return (\n                                    <li className={\n                                        item.className +\n                                        (item.id === activeLink ? \" nav-item active_item\" : \" nav-item\")\n                                      } key = {item.id}>\n                                        <p className=\"nav-link\" data-toggle=\"tab\" onClick={(e) => this.selectMenuItem(item.id)} >\n                                            <span>{item.name}</span>\n                                        </p>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                    \n                \n            </React.Fragment>\n        );\n    }\n}\nexport default Sidebar;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerDashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerOperations.js",["232"],"import React, { Component } from 'react';\n\nimport jsonData from \"../../data/operationsData.json\";\nimport AdminService from \"../services/admin.service\";\n\nclass WorkerOperations extends Component {\n    state = {\n        searchValue: \"\",\n        listitems: jsonData.operationsList,\n        selectedItem: [],\n        editOperationPage: false\n    }\n    constructor(props) {\n        super(props);\n        //this.getAllOperationList();\n    }\n    getAllOperationList() {\n        AdminService.getAllOperations().then(\n            response => {\n                this.setState({\n                    listitems: response.data.operations\n                });\n            },\n            error => {\n              console.log(\"Error\");\n            }\n          );\n    }\n    handleSearchChange(e) {\n        this.setState({\n            searchValue: e.target.value.toLowerCase()\n        });\n    }\n   \n    onOperationSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    parentCallback = () => {\n        this.setState({\n            selectedItem: []\n        });\n        this.setState({\n            editOperationPage:false\n          });\n    }\n    renderOperationsList() {\n        return(\n            <div className=\"col admin-list-page\" id=\"operations-page\">\n                    <div className=\"list-group-header section-header row\">\n\n                        <div className=\"col-4\">\n                            <span className=\"mb-1 underline\">Manage</span>\n                            <span className=\"mb-1 blue-color pl-2\">Operations</span>\n                        </div>\n\n                        <div className=\"col-8 text-right\">\n                            <div className=\"has-search\">\n                                <span className=\"fa fa-search form-control-feedback\"></span>\n                                <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search quote requests...\" onChange={this.handleSearchChange.bind(this)} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"quote-req-list\">\n                        <div className=\"row mt-1 quote-req-header\">\n                            <div className=\"col-sm\">\n                                <label>Operation Name</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Description</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Start Date</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>End Date</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Commited</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Left</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Status</label>\n                            </div>\n                        </div>\n                        <div className=\"quote-req-table\">\n\n                           {this.state.listitems.filter(item =>\n                                item.o_name.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                                    <div className=\"row mt-1\" key={listitem.id}>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                                <input type=\"radio\" className=\"toggle\"\n                                                    name=\"operationItem\" value={listitem.id}\n                                                    onChange={() => this.onOperationSelected(listitem)} />\n                                                {listitem.o_name}\n                                            </label>\n                                            \n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"description-truncate text-truncate\">{listitem.o_desc}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.createdAt}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.updatedAt}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hoursCommited}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hoursLeft}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.status}</label>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderOperationsList()}\n            </React.Fragment>\n        );\n    }\n}\nexport default WorkerOperations;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerProjects.js",["233"],"import React, { Component } from 'react';\nimport {statusColorClass} from '../common/Utils.js';\n\nimport AdminService from \"../services/admin.service\";\n\nimport jsonData from \"../../data/projectData.json\";\n\nclass WorkerProjects extends Component {\n    state = {\n        searchValue: \"\",\n        listitems: jsonData.projects,\n        selectedItem: [],\n        editProjectPage: false\n    }\n    constructor(props) {\n        super(props);\n        //this.getAllProjectList();\n    }\n    getAllProjectList() {\n        AdminService.getAllProjects().then(\n            response => {\n                this.setState({\n                    listitems: response.data.projects\n                });\n            },\n            error => {\n              console.log(\"Error\");\n            }\n          );\n          \n    }\n    handleSearchChange(e) {\n        this.setState({\n            searchValue: e.target.value.toLowerCase()\n        });\n    }\n    \n    onProjectSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    parentCallback = () => {\n        this.setState({\n            selectedItem: []\n        });\n        this.setState({\n            editProjectPage:false\n          });\n    }\n    renderProjectList() {\n        return(\n            <div className=\"col admin-list-page\" id=\"projects-page\">\n                    <div className=\"list-group-header section-header row\">\n\n                        <div className=\"col-4\">\n                            <span className=\"mb-1 underline\">Manage</span>\n                            <span className=\"mb-1 blue-color pl-2\">Projects</span>\n                        </div>\n\n                        <div className=\"col-8 text-right\">\n                            <div className=\"has-search\">\n                                <span className=\"fa fa-search form-control-feedback\"></span>\n                                <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search projects...\" onChange={this.handleSearchChange.bind(this)} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"quote-req-list\">\n                        <div className=\"row mt-1 quote-req-header\">\n                            <div className=\"col-sm\">\n                                <label>Project Name</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Description</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Commited</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Left</label>\n                            </div>\n\n                            <div className=\"col-sm\">\n                                <label>Start Date</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>End Date</label>\n                            </div>\n                            \n                            \n                            <div className=\"col-sm\">\n                                <label>Status</label>\n                            </div>\n                        </div>\n                        <div className=\"quote-req-table\">\n                        \n                            {this.state.listitems.filter(item =>\n                                item.p_name.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                                    <div className=\"row mt-1\" key={listitem.id}>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                                <input type=\"radio\" className=\"toggle\"\n                                                    name=\"projectItem\" value={listitem.id}\n                                                    onChange={() => this.onProjectSelected(listitem)} />\n                                                {listitem.p_name}\n                                            </label>\n                                            \n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"description-truncate text-truncate\">{listitem.p_desc}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hours_commited}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hours_left}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{(new Date(listitem.start_date)).toLocaleDateString()}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{(new Date(listitem.end_date)).toLocaleDateString()}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className = {\"badge \" + statusColorClass(listitem.p_status)} >{listitem.p_status}</label>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderProjectList()}\n            </React.Fragment>\n        );\n    }\n}\nexport default WorkerProjects;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerTimesheet.js",["234"],"\nimport React, { Component } from 'react';\n\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda, Inject } from '@syncfusion/ej2-react-schedule';\n\nclass WorkerSchedule extends Component {\n    state = {\n       \n    }\n    constructor(props) {\n        super(props);\n        \n    }\n    render() {\n        return (\n            <div className=\"col admin-list-page\" id=\"operations-page\">\n            <ScheduleComponent>\n    <Inject services={[Day, Week, WorkWeek, Month, Agenda]}/>\n</ScheduleComponent>\n</div>\n        );\n    }\n}\nexport default WorkerSchedule;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ToolsList.js",[],["235","236"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Checkbox.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/OperationList.js",["237"],"import React, { Component } from 'react';\n\nimport AdminService from \"../services/admin.service\";\n\nimport Checkbox from \"../components/Checkbox\";\n\nclass OperationList extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            listitems: [],\n            searchValue: \"\"\n        }\n        this.getAllOperationList();\n    }\n\n    getAllOperationList() {\n        AdminService.getAllOperations().then(\n            response => {\n                console.log(response);\n                debugger;\n                this.setState({\n                    listitems: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    onTagOperationSelectedSave() {\n        this.props.popupClose(this.state.selectedItem);\n    }\n\n    onOperationSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"admin-list-page\">\n                    <div className=\"quote-req-list\">\n                        <div className=\"row mt-1 quote-req-header\">\n                            <div className=\"col-sm\">\n                                <label>Operation Name</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Description</label>\n                            </div>\n\n                        </div>\n\n                        <div className=\"quote-req-table\">\n                            {this.state.listitems && this.state.listitems.filter(item =>\n                                item.name.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                                    <div className=\"row mt-1\" key={listitem.id}>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                                <input type=\"radio\" className=\"toggle\"\n                                                    name=\"operationItem\" value={listitem.id}\n                                                    onChange={() => this.onOperationSelected(listitem)} />\n                                                {listitem.name}\n                                            </label>\n\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"description-truncate text-truncate\">{listitem.desc}</label>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                        <button onClick={() => this.onTagOperationSelectedSave()} className=\"btn btn-success btn-sm\" >Save</button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n\n    }\n}\nexport default OperationList;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ConfigureOperation.js",["238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256"],"import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport TableRow from \"../components/TableRow\";\nimport TableHeader from \"../components/TableHeader\";\nimport AdminService from \"../services/admin.service\";\nimport MyAlert from \"../components/MyAlert\";\n\nclass ConfigureOperation extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listitems: [],\n            toolList: [],\n            workerList: [],\n            selectedToolList: [],\n            selectedWorkerList: [],\n            showAlert: false,\n            alertConfig: {\n                \"variant\": \"danger\"\n            },\n            totalCost: 0,\n            tabActiveKey: \"tools\",\n            workerSearchValue: \"\",\n            toolSearchValue: \"\",\n            hasMoreTools: true,\n            toolPageNo: 0,\n            hasMoreWorkers: true,\n            workerPageNo: 0\n        }    \n       // this.getData();\n       this.getAllTools();\n    }\n\n    getData() {\n        if(this.props.showTools) {\n            this.getAllTools();\n        }\n        if(this.props.showWorkers) {\n            this.getAllWorkers();\n        }\n    }\n\n    getAllTools() {\n        AdminService.getAllInventory(this.state.toolPageNo).then(\n            response => {\n                var tmpListitems = [...this.state.toolList, ...response.data.rows];\n                this.setState({\n                    toolList: tmpListitems,\n                    toolPageNo: this.state.toolPageNo+1\n                });\n\n                if(this.state.toolPageNo >= response.data.currentPage) {\n                    this.setState({\n                        hasMoreTools: false\n                    });\n                }\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    getAllWorkers() {\n        AdminService.getAllWorkers(this.state.workerPageNo).then(\n            response => {\n                var tmpListitems = [...this.state.workerList, ...response.data.rows];\n                this.setState({\n                    workerList: tmpListitems,\n                    workerPageNo: this.state.workerPageNo+1\n                });\n\n                if(this.state.workerPageNo >= response.data.currentPage) {\n                    this.setState({\n                        hasMoreWorkers: false\n                    });\n                }\n            },\n\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    showAlertMessage(msg) {\n        this.setState(prevState => ({\n            alertConfig: { \n                ...prevState.alertConfig,\n                message: msg\n            },\n            showAlert: true \n        }))\n    }\n\n    handleCheckboxChange = changeEvent => {\n        const { name } = changeEvent.target;\n        let obj =[]; obj[\"Inventories\"] = this.state.toolList.find(o => o.id == name);\n        obj[\"req_quantity\"] = this.state.toolList.find(o => o.id == name).req_quantity;\n\n        if(!this.state.toolList.find(o => o.id == name).req_quantity){\n            this.showAlertMessage(\"Please add required quantity\");\n            changeEvent.target.checked = false;\n        }\n        else {\n            \n            this.setState({\n                showAlert: false\n            });\n            if (changeEvent.target.checked) {\n                this.state.selectedToolList.push(obj);\n                var tmpCost = this.state.totalCost + (obj.Inventories.cost * obj.Inventories.req_quantity);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            } else {\n                let tmpObj = this.state.selectedToolList.filter(item => item.id !== name);\n                this.state.selectedToolList = tmpObj;\n                var tmpCost = this.state.totalCost - (obj.Inventories.cost * obj.Inventories.req_quantity);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            }\n        }\n    };\n\n    handleWorkerCheckboxChange = changeEvent => {\n\n        const { name } = changeEvent.target;\n        let obj =[]; obj[\"Workers\"]= this.state.workerList.find(item => item.id == name);\n        obj[\"total_hrs_req\"] = this.state.workerList.find(item => item.id == name).total_hrs_req;\n\n        if(!this.state.workerList.find(o => o.id == name).total_hrs_req){\n            this.showAlertMessage(\"Please add required hours\");\n            changeEvent.target.checked = false;\n        }\n        else {\n            this.setState({\n                showAlert: false\n            });\n\n            if (changeEvent.target.checked) {\n                this.state.selectedWorkerList.push(obj)\n                var tmpCost = this.state.totalCost + (obj.Workers.cost_per_hr * obj.Workers.total_hrs_req);\n                this.setState({\n                    totalCost: tmpCost\n                });\n\n            } else {\n                let tmpObj = this.state.selectedWorkerList.filter(item => item.id != name);\n                this.state.selectedWorkerList = tmpObj;\n                var tmpCost = this.state.totalCost - (obj.Workers.cost_per_hr * obj.Workers.total_hrs_req);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            }\n        }\n    };\n\n    reqQntyChange = changeEvent => {\n        if(changeEvent.target.type === 'number') {\n            changeEvent.target.value = Math.abs(changeEvent.target.value);\n        }\n        const { name } = changeEvent.target;\n        let obj =[]; obj = this.state.toolList;\n        let sObj = []; sObj = this.state.selectedToolList;\n        if(obj.find(o => o.id == name)) {\n            obj.find(o => o.id == name)['req_quantity'] = changeEvent.target.value;\n        }\n        if(sObj.find(o => o.Inventories.id == name)) {\n            sObj.find(o => o.Inventories.id == name)['req_quantity'] = changeEvent.target.value;\n        }\n        this.setState({\n            toolList: obj,\n            selectedToolList: sObj\n        });\n    };\n    reqHourChange = changeEvent => {\n        if(changeEvent.target.type === 'number') {\n            changeEvent.target.value = Math.abs(changeEvent.target.value);\n        }\n        \n        const { name } = changeEvent.target;\n        \n        let obj =[]; obj = this.state.workerList;\n        let sObj = []; sObj = this.state.selectedWorkerList;\n        if(obj.find(o => o.id == name)) {\n            obj.find(o => o.id == name)['total_hrs_req'] = changeEvent.target.value;\n        }\n        if(sObj.find(o => o.Workers.id == name)) {\n            sObj.find(o => o.Workers.id == name)['total_hrs_req'] = changeEvent.target.value;\n        }\n        this.setState({\n            workerList: obj,\n            selectedWorkerList: sObj\n        }); \n    };\n\n    createToolRow = option => (\n        <TableRow\n            type=\"tool\"\n            listItem={option}\n            onCheckboxChange={this.handleCheckboxChange}\n            onreqQntyChange = {this.reqQntyChange}\n        />\n    );\n\n    createWorkerCheckbox = option => (\n        <TableRow\n            type=\"worker\"\n            listItem={option}\n            onCheckboxChange={this.handleWorkerCheckboxChange}\n            onreqQntyChange = {this.reqHourChange}\n        />\n    );\n    createTableHeader = (type) => {\n        var tableHeader = [];\n        if (type === \"tool\") {\n            tableHeader = [\"inputCheckbox\", \"Tool Name\", \"Available Quantity\", \"Cost\", \"Required Quantity\"];\n            return (\n                <TableHeader\n                    headerObj={tableHeader}\n                    onCheckboxChange={this.handleCheckboxChange}\n                />\n            );\n        } else if (\"worker\") {\n            tableHeader = [\"inputCheckbox\", \"Worker Name\", \"Available per Day\", \"Cost per Hour\", \"Required Hours\"];\n            return (\n                <TableHeader\n                    headerObj={tableHeader}\n                    onCheckboxChange={this.handleWorkerCheckboxChange}\n                />\n            );\n        }\n    };\n    createToolList = () => (\n        this.state.toolList.filter(item => item.itemName.toLowerCase().includes(this.state.toolSearchValue)).map(this.createToolRow)\n    );\n    createWorkerList = () => (\n        this.state.workerList.filter(item => item.name.toLowerCase().includes(this.state.workerSearchValue)).map(this.createWorkerCheckbox)\n    );\n    saveConfigOperation(e) {\n        var selectedObj = {};\n        selectedObj['tools'] = this.state.selectedToolList;\n        selectedObj['workers'] = this.state.selectedWorkerList;\n        selectedObj['totalCost'] = this.state.totalCost;\n        this.props.popupClose(selectedObj);\n    };\n    selectTab(key) {\n        this.setState({\n            tabActiveKey: key\n        });\n    };\n    handleToolSearchChange(e) {\n        this.setState({\n            toolSearchValue: e.target.value.toLowerCase()\n        });\n    }\n    handleWorkerSearchChange(e) {\n        this.setState({\n            workerSearchValue: e.target.value.toLowerCase()\n        });\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n\n        <Tabs\n          id=\"controlled-tab-example\"\n          activeKey={this.state.tabActiveKey} onSelect={this.selectTab.bind(this)} >\n   \n          <Tab eventKey=\"tools\" title=\"Tools\">\n            \n\n          {this.props.showTools && <div>\n                    <span className=\"underline blue\">Add Tools</span>\n\n                    <div className=\"has-search mt-2\">\n                        <span className=\"fa fa-search form-control-feedback\"></span>\n                        <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search Tools...\" onChange={this.handleToolSearchChange.bind(this)} />\n                    </div>\n\n\n                    <Table responsive=\"sm\" className=\"conf-table\">\n                        <tbody>\n\n\n                        <InfiniteScroll\n                pageStart={0}\n                loadMore={this.getAllTools.bind(this)}\n                hasMore={this.state.hasMoreTools}\n                loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                useWindow={false}\n            >\n\n                            {this.createTableHeader(\"tool\")}\n                            {this.createToolList()}\n\n\n                </InfiniteScroll>\n\n                        </tbody>\n                    </Table>\n                    </div>\n                }\n\n\n          </Tab>\n          <Tab eventKey=\"workers\" title=\"Workers\">\n            \n            \n          {this.props.showWorkers && \n                <div>\n                    <span className=\"underline blue\">Add Worker</span>\n                    <div className=\"has-search mt-2\">\n                        <span className=\"fa fa-search form-control-feedback\"></span>\n                        <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search Workers...\" onChange={this.handleWorkerSearchChange.bind(this)} />\n                    </div>\n                    <Table responsive=\"sm\" className=\"conf-table\">\n                        <tbody>\n\n                        <InfiniteScroll\n                pageStart={0}\n                loadMore={this.getAllWorkers.bind(this)}\n                hasMore={this.state.hasMoreWorkers}\n                loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                useWindow={false}\n            >\n\n\n                            {this.createTableHeader(\"worker\")}\n                            {this.createWorkerList()}\n\n\n                            </InfiniteScroll>\n\n\n                        </tbody>\n                    </Table>\n\n                </div>\n                }\n\n          </Tab>\n       \n        </Tabs>\n\n\n\n\n\n                \n                \n                <button onClick={this.saveConfigOperation.bind(this)} className=\"btn btn-success btn-sm\" > Save </button>\n\n\n\n\n\n\n                {this.state.showAlert && < MyAlert alertConfig = {this.state.alertConfig} showAlert={this.state.showAlert} /> }\n\n            </React.Fragment>\n        );\n\n    }\n}\nexport default ConfigureOperation;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableRow.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableHeader.js",["257"],"import React from \"react\";\n\nconst TableHeader = ({ headerObj, onCheckboxChange }) => {\n\n  return (\n    <tr className=\"green-text-color2\" key=\"tableHeade\">\n      {headerObj && headerObj.map((item, i) => {\n          if (item == \"inputCheckbox\") {\n            return (\n              <th key=\"0\" >\n                <input type=\"checkbox\" name=\"selectAllTools\" />\n              </th>\n            )\n          } else {\n            return (\n              <th key={item}>{item}</th>\n            )\n          }\n        }\n      )}\n    </tr>\n  );\n}\n\nexport default TableHeader;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Profile.js",["258"],"import React, { Component } from 'react';\nimport { Button, Card, CardBody, CardGroup, Form, Input, InputGroup } from \"reactstrap\";\nimport userService from \"../services/user.service\";\nimport workerService from '../services/worker.service';\nimport {usersTag}  from \"../common/Constants\";\n\n\nclass Profile extends Component {\n    state = {\n        item:{},\n        userId: JSON.parse(localStorage.getItem('user')).userId,\n        respMsg: ''\n    }\n    constructor(props) {\n        super(props);\n        this.getUserData();\n    }\n    getUserData() {\n        if(this.state.userId === usersTag.USER_TAG) {\n            userService.getSingleCustomer().then(\n                response => {\n                    this.setState({\n                        item: response.data\n                      });\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        } else if(this.state.userId === usersTag.WORKER_TAG) {\n            workerService.getWorkerProfile().then(\n                response => {\n                    this.setState({\n                        item: response.data\n                      });\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n    }\n\n    handleChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    saveProfile() {\n        if(this.state.userId === usersTag.USER_TAG) {\n            var data = {\n                \"name\": this.state.item.name,\n                \"email\": this.state.item.email,\n                \"phone\": this.state.item.phone,\n                \"address\": this.state.item.address\n            };\n            userService.updateUserProfile(data).then(\n                response => {\n                    //localStorage.setItem(\"user\", JSON.stringify(response.data.data));\n                    var tmpUser = JSON.parse(localStorage.getItem('user'));\n                    tmpUser.userName = response.data.data.name;\n                    localStorage.setItem(\"user\", JSON.stringify(tmpUser));\n                    \n                    this.setState({\n                        respMsg: response.data.message\n                      });\n                },\n                error => {\n                    this.setState({\n                        respMsg: \"Something went wrong\"\n                      });\n                }\n            );\n\n        } else if(this.state.userId === usersTag.WORKER_TAG) {\n            var data = {   \n                \"name\": this.state.item.name,\n                \"phone\": this.state.item.phone,\n                \"address\": this.state.item.address,\n                \"avail_per_day\": this.state.item.avail_per_day,\n                \"cost_per_hr\": this.state.item.cost_per_hr,\n                \"total_avail_per_week\": 11,\n                \"professionId\":this.state.item.professionId\n            }\n            workerService.updateWorkerProfile(data).then(\n                response => {\n                    this.setState({\n                        respMsg: response.data.message\n                      });\n                },\n                error => {\n                    this.setState({\n                        respMsg: \"Something went wrong\"\n                      });\n                }\n            );\n        }\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <CardGroup>\n                    <Card className=\"p-2 profile-form\">\n                        <CardBody>\n                            <Form>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Name</span>\n                                    <Input type=\"text\" placeholder=\"Enter Name\" defaultValue={this.state.item.name} onChange={this.handleChange.bind(this, 'name')} />\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Phone Number</span>\n                                    <Input type=\"text\" placeholder=\"Enter Phone Number\" defaultValue={this.state.item.phone} onChange={this.handleChange.bind(this, 'phone')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Address</span>\n                                    <Input type=\"text\" placeholder=\"Enter Address\" defaultValue={this.state.item.address} onChange={this.handleChange.bind(this, 'address')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Email</span>\n                                    <Input type=\"text\" placeholder=\"Enter Email\" readOnly = {true} defaultValue={this.state.item.email} onChange={this.handleChange.bind(this, 'email')}/>\n                                </InputGroup>\n\n{(this.state.userId === usersTag.WORKER_TAG) && <div>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Availability per day</span>\n                                    <Input type=\"text\" placeholder=\"Availability per day\" defaultValue={this.state.item.avail_per_day} onChange={this.handleChange.bind(this, 'avail_per_day')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Cost per hour</span>\n                                    <Input type=\"text\" placeholder=\"Cost per hour\" defaultValue={this.state.item.cost_per_hr} onChange={this.handleChange.bind(this, 'cost_per_hr')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <span className=\"input-group-text\">Profession</span>\n                                    <Input type=\"text\" placeholder=\"Profession\" defaultValue={this.state.item.ProfessionId} onChange={this.handleChange.bind(this, 'professionId')}/>\n                                </InputGroup>\n</div>\n}\n                                \n\n\n                                <InputGroup className=\"mb-3 justify-content-center\">\n                                    <Button color=\"success\"  onClick={() => this.saveProfile()}>Save</Button> \n                                </InputGroup>\n                                <div className=\"text-success\">{this.state.respMsg}</div>\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </CardGroup>\n\n            </React.Fragment>\n        );\n    }\n}\nexport default Profile;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/worker.service.js",[],{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","replacedBy":"262"},{"ruleId":"263","severity":1,"message":"264","line":77,"column":64,"nodeType":"265","messageId":"266","endLine":77,"endColumn":66},{"ruleId":"267","severity":1,"message":"268","line":109,"column":17,"nodeType":"269","endLine":109,"endColumn":40},{"ruleId":"270","severity":1,"message":"271","line":114,"column":21,"nodeType":"272","messageId":"273","endLine":114,"endColumn":38},{"ruleId":"267","severity":1,"message":"268","line":119,"column":17,"nodeType":"269","endLine":119,"endColumn":40},{"ruleId":"274","severity":1,"message":"275","line":162,"column":104,"nodeType":"276","messageId":"277","endLine":162,"endColumn":106},{"ruleId":"263","severity":1,"message":"278","line":175,"column":36,"nodeType":"265","messageId":"266","endLine":175,"endColumn":38},{"ruleId":"270","severity":1,"message":"279","line":50,"column":17,"nodeType":"272","messageId":"273","endLine":50,"endColumn":24},{"ruleId":"263","severity":1,"message":"278","line":54,"column":53,"nodeType":"265","messageId":"266","endLine":54,"endColumn":55},{"ruleId":"267","severity":1,"message":"268","line":146,"column":9,"nodeType":"269","endLine":146,"endColumn":19},{"ruleId":"263","severity":1,"message":"264","line":146,"column":74,"nodeType":"265","messageId":"266","endLine":146,"endColumn":76},{"ruleId":"267","severity":1,"message":"268","line":149,"column":9,"nodeType":"269","endLine":149,"endColumn":34},{"ruleId":"270","severity":1,"message":"279","line":50,"column":17,"nodeType":"272","messageId":"273","endLine":50,"endColumn":24},{"ruleId":"263","severity":1,"message":"278","line":54,"column":53,"nodeType":"265","messageId":"266","endLine":54,"endColumn":55},{"ruleId":"270","severity":1,"message":"280","line":168,"column":21,"nodeType":"272","messageId":"273","endLine":168,"endColumn":25},{"ruleId":"281","severity":1,"message":"282","line":33,"column":37,"nodeType":"265","messageId":"283","endLine":33,"endColumn":38},{"ruleId":"281","severity":1,"message":"282","line":260,"column":40,"nodeType":"265","messageId":"283","endLine":260,"endColumn":41},{"ruleId":"281","severity":1,"message":"282","line":10,"column":37,"nodeType":"265","messageId":"283","endLine":10,"endColumn":38},{"ruleId":"284","severity":1,"message":"285","line":3,"column":10,"nodeType":"272","messageId":"286","endLine":3,"endColumn":17},{"ruleId":"284","severity":1,"message":"287","line":5,"column":10,"nodeType":"272","messageId":"286","endLine":5,"endColumn":23},{"ruleId":"274","severity":1,"message":"275","line":109,"column":110,"nodeType":"276","messageId":"277","endLine":109,"endColumn":112},{"ruleId":"274","severity":1,"message":"275","line":118,"column":116,"nodeType":"276","messageId":"277","endLine":118,"endColumn":118},{"ruleId":"263","severity":1,"message":"264","line":267,"column":60,"nodeType":"265","messageId":"266","endLine":267,"endColumn":62},{"ruleId":"270","severity":1,"message":"288","line":295,"column":11,"nodeType":"272","messageId":"273","endLine":295,"endColumn":14},{"ruleId":"263","severity":1,"message":"264","line":295,"column":82,"nodeType":"265","messageId":"266","endLine":295,"endColumn":84},{"ruleId":"284","severity":1,"message":"289","line":1,"column":28,"nodeType":"272","messageId":"286","endLine":1,"endColumn":37},{"ruleId":"290","severity":1,"message":"291","line":24,"column":5,"nodeType":"292","messageId":"293","endLine":26,"endColumn":6},{"ruleId":"294","severity":1,"message":"295","line":29,"column":9,"nodeType":"296","endLine":29,"endColumn":106},{"ruleId":"267","severity":1,"message":"268","line":74,"column":9,"nodeType":"269","endLine":74,"endColumn":19},{"ruleId":"290","severity":1,"message":"291","line":13,"column":5,"nodeType":"292","messageId":"293","endLine":16,"endColumn":6},{"ruleId":"290","severity":1,"message":"291","line":15,"column":5,"nodeType":"292","messageId":"293","endLine":18,"endColumn":6},{"ruleId":"290","severity":1,"message":"291","line":10,"column":5,"nodeType":"292","messageId":"293","endLine":13,"endColumn":6},{"ruleId":"259","replacedBy":"297"},{"ruleId":"261","replacedBy":"298"},{"ruleId":"284","severity":1,"message":"299","line":5,"column":8,"nodeType":"272","messageId":"286","endLine":5,"endColumn":16},{"ruleId":"263","severity":1,"message":"264","line":102,"column":78,"nodeType":"265","messageId":"266","endLine":102,"endColumn":80},{"ruleId":"263","severity":1,"message":"264","line":103,"column":66,"nodeType":"265","messageId":"266","endLine":103,"endColumn":68},{"ruleId":"263","severity":1,"message":"264","line":105,"column":48,"nodeType":"265","messageId":"266","endLine":105,"endColumn":50},{"ruleId":"267","severity":1,"message":"268","line":122,"column":17,"nodeType":"269","endLine":122,"endColumn":27},{"ruleId":"270","severity":1,"message":"300","line":123,"column":21,"nodeType":"272","messageId":"273","endLine":123,"endColumn":28},{"ruleId":"263","severity":1,"message":"264","line":134,"column":81,"nodeType":"265","messageId":"266","endLine":134,"endColumn":83},{"ruleId":"263","severity":1,"message":"264","line":135,"column":75,"nodeType":"265","messageId":"266","endLine":135,"endColumn":77},{"ruleId":"263","severity":1,"message":"264","line":137,"column":50,"nodeType":"265","messageId":"266","endLine":137,"endColumn":52},{"ruleId":"263","severity":1,"message":"278","line":154,"column":83,"nodeType":"265","messageId":"266","endLine":154,"endColumn":85},{"ruleId":"267","severity":1,"message":"268","line":155,"column":17,"nodeType":"269","endLine":155,"endColumn":27},{"ruleId":"270","severity":1,"message":"300","line":156,"column":21,"nodeType":"272","messageId":"273","endLine":156,"endColumn":28},{"ruleId":"263","severity":1,"message":"264","line":171,"column":31,"nodeType":"265","messageId":"266","endLine":171,"endColumn":33},{"ruleId":"263","severity":1,"message":"264","line":172,"column":32,"nodeType":"265","messageId":"266","endLine":172,"endColumn":34},{"ruleId":"263","severity":1,"message":"264","line":174,"column":44,"nodeType":"265","messageId":"266","endLine":174,"endColumn":46},{"ruleId":"263","severity":1,"message":"264","line":175,"column":45,"nodeType":"265","messageId":"266","endLine":175,"endColumn":47},{"ruleId":"263","severity":1,"message":"264","line":191,"column":31,"nodeType":"265","messageId":"266","endLine":191,"endColumn":33},{"ruleId":"263","severity":1,"message":"264","line":192,"column":32,"nodeType":"265","messageId":"266","endLine":192,"endColumn":34},{"ruleId":"263","severity":1,"message":"264","line":194,"column":40,"nodeType":"265","messageId":"266","endLine":194,"endColumn":42},{"ruleId":"263","severity":1,"message":"264","line":195,"column":41,"nodeType":"265","messageId":"266","endLine":195,"endColumn":43},{"ruleId":"263","severity":1,"message":"264","line":8,"column":20,"nodeType":"265","messageId":"266","endLine":8,"endColumn":22},{"ruleId":"270","severity":1,"message":"280","line":76,"column":17,"nodeType":"272","messageId":"273","endLine":76,"endColumn":21},"no-native-reassign",["301"],"no-negated-in-lhs",["302"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-redeclare","'selectedOperation' is already defined.","Identifier","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '!==' and instead saw '!='.","'pattern' is already defined.","'data' is already defined.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-unused-vars","'isEmail' is defined but never used.","unusedVar","'loginMessages' is defined but never used.","'obj' is already defined.","'useEffect' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["301"],["302"],"'Checkbox' is defined but never used.","'tmpCost' is already defined.","no-global-assign","no-unsafe-negation"]