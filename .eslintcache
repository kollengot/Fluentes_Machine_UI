[{"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/index.js":"1","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/reportWebVitals.js":"2","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Login.js":"3","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Dashboard.js":"4","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Constants.js":"5","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Quote.js":"6","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Header.js":"7","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteList.js":"8","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteDetail.js":"9","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Routes.js":"10","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Footer.js":"11","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/AdminDashboard.js":"12","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInventory.js":"13","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditInventory.js":"14","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageOperations.js":"15","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditOperations.js":"16","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Utils.js":"17","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageWorker.js":"18","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditWorker.js":"19","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageProjects.js":"20","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditProject.js":"21","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageCustomer.js":"22","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditCustomer.js":"23","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInspections.js":"24","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/auth.service.js":"25","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/admin.service.js":"26","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Upload.js":"27","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/user.service.js":"28","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ForgotPassword.js":"29","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditQuote.js":"30","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageQuote.js":"31","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/MyAlert.js":"32","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Popup.js":"33","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Sidebar.js":"34","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerDashboard.js":"35","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerOperations.js":"36","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerProjects.js":"37","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerTimesheet.js":"38","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ToolsList.js":"39","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Checkbox.js":"40","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/OperationList.js":"41","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ConfigureOperation.js":"42","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableRow.js":"43","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableHeader.js":"44","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Profile.js":"45","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/worker.service.js":"46"},{"size":410,"mtime":1630695188461,"results":"47","hashOfConfig":"48"},{"size":362,"mtime":1611647184538,"results":"49","hashOfConfig":"48"},{"size":5251,"mtime":1630692541546,"results":"50","hashOfConfig":"48"},{"size":2983,"mtime":1629427790748,"results":"51","hashOfConfig":"48"},{"size":574,"mtime":1631563677734,"results":"52","hashOfConfig":"48"},{"size":9943,"mtime":1631583586153,"results":"53","hashOfConfig":"48"},{"size":3471,"mtime":1631830867735,"results":"54","hashOfConfig":"48"},{"size":4192,"mtime":1631562199720,"results":"55","hashOfConfig":"48"},{"size":20326,"mtime":1631819181953,"results":"56","hashOfConfig":"48"},{"size":1216,"mtime":1625797895746,"results":"57","hashOfConfig":"48"},{"size":358,"mtime":1612063115281,"results":"58","hashOfConfig":"48"},{"size":2611,"mtime":1630695262470,"results":"59","hashOfConfig":"48"},{"size":8452,"mtime":1631560748035,"results":"60","hashOfConfig":"48"},{"size":7172,"mtime":1630472094472,"results":"61","hashOfConfig":"48"},{"size":8493,"mtime":1631560452603,"results":"62","hashOfConfig":"48"},{"size":11903,"mtime":1631080242740,"results":"63","hashOfConfig":"48"},{"size":1032,"mtime":1631596646493,"results":"64","hashOfConfig":"48"},{"size":7873,"mtime":1631080544580,"results":"65","hashOfConfig":"48"},{"size":7864,"mtime":1630792023999,"results":"66","hashOfConfig":"48"},{"size":9303,"mtime":1630561340357,"results":"67","hashOfConfig":"48"},{"size":10606,"mtime":1631561137878,"results":"68","hashOfConfig":"48"},{"size":7204,"mtime":1631560522808,"results":"69","hashOfConfig":"48"},{"size":4566,"mtime":1630703435731,"results":"70","hashOfConfig":"48"},{"size":11390,"mtime":1630340976035,"results":"71","hashOfConfig":"48"},{"size":1631,"mtime":1630563857840,"results":"72","hashOfConfig":"48"},{"size":11261,"mtime":1630703149574,"results":"73","hashOfConfig":"48"},{"size":1372,"mtime":1623734059427,"results":"74","hashOfConfig":"48"},{"size":2484,"mtime":1630431721149,"results":"75","hashOfConfig":"48"},{"size":1582,"mtime":1624509978010,"results":"76","hashOfConfig":"48"},{"size":22231,"mtime":1631818642365,"results":"77","hashOfConfig":"48"},{"size":7311,"mtime":1631030746072,"results":"78","hashOfConfig":"48"},{"size":386,"mtime":1630692468135,"results":"79","hashOfConfig":"48"},{"size":2157,"mtime":1631819784591,"results":"80","hashOfConfig":"48"},{"size":3269,"mtime":1630693936976,"results":"81","hashOfConfig":"48"},{"size":1779,"mtime":1630653254288,"results":"82","hashOfConfig":"48"},{"size":5826,"mtime":1631562561761,"results":"83","hashOfConfig":"48"},{"size":6059,"mtime":1631562700034,"results":"84","hashOfConfig":"48"},{"size":562,"mtime":1626152776745,"results":"85","hashOfConfig":"48"},{"size":4472,"mtime":1627573905514,"results":"86","hashOfConfig":"48"},{"size":369,"mtime":1626846725760,"results":"87","hashOfConfig":"48"},{"size":3091,"mtime":1627619563041,"results":"88","hashOfConfig":"48"},{"size":8676,"mtime":1629743472912,"results":"89","hashOfConfig":"48"},{"size":1397,"mtime":1630692934443,"results":"90","hashOfConfig":"48"},{"size":563,"mtime":1630692946468,"results":"91","hashOfConfig":"48"},{"size":3131,"mtime":1630716871357,"results":"92","hashOfConfig":"48"},{"size":559,"mtime":1630716678295,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"oxb9l2",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"96"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"96"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"96"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"96"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"96"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"96"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/index.js",[],["204","205"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/reportWebVitals.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Login.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Dashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Constants.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/Quote.js",["206","207"],"import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport UserService from \"../services/user.service\";\n\nconst today = new Date();\nclass UserQuote extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: {},\n            measuresObjId: 1\n        }\n        this.state.item['measures']= [\n            {\n                \"id\": this.state.measuresObjId,\n                \"name\": \"\",\n                \"unit\": \"\",\n                \"qty\": \"\"\n            }\n        ];\n    }\n\n    resetQuote() {\n        this.setState({ \n            item: {},\n            measuresObjId: 1\n         });\n         var obj = this.state.item;\n         obj['measures']= [];\n        this.setState({item:obj});\n    }\n\n    sendQuoteReq() {\n\n        let newMeasuresArray = this.state.item.measures.map(function(item) { \n            delete item.id; \n            return item; \n        });\n\n        var data = {\n            \"title\": this.state.item.title,\n            \"desc\": this.state.item.desc,\n            \"status\": \"NEW\",\n            \"startDate\": this.state.item.startDate,\n            \"endDate\": this.state.item.endDate,\n            \"measures\": newMeasuresArray,\n            \"uploads\": this.state.item.uploads\n        };\n        UserService.createQuote(data).then(\n            response => {\n                this.props.parentCreateCallBack(response.data);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n\n    }\n\n    handleFileInput(e) {\n        const file = e.target.files[0];\n        if(file) {\n            const config = {\n                bucketName: 'fuentes-fileupload',\n                dirName: 'quote-attachments',\n                region: 'us-west-1',\n                accessKeyId: 'AKIA5ARA5MYMNVC47U6F',\n                secretAccessKey: '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'\n            }\n            const ReactS3Client = new S3(config);\n            const newFileName = file.name;\n    \n            ReactS3Client\n                .uploadFile(file, newFileName)\n                .then(data => {\n                    var newUploads = {\n                        \"fileName\": newFileName,\n                        \"filePath\": data.location\n                    };\n                    var obj = this.state.item;\n\n                    if(obj.uploads) {\n                        obj['uploads'].push(newUploads);\n                    } else {\n                        obj['uploads'] = [];\n                        obj['uploads'].push(newUploads);\n                    }\n                    this.setState({item:obj});\n\n                })\n                .catch(err => console.error(err))\n            \n        }   \n    }\n\n    handleFormChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    handleDateChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = new Date(event);\n        this.setState({ item: item });\n    }\n    handleMeasureChange(id,propertyName,event){\n        var tmpObj  = this.state.item;\n        tmpObj.measures.find(o => o.id == id)[propertyName] = event.target.value;\n        this.setState({item: tmpObj});\n    }\n\n    addMeasuresClick() {\n        let tmpObj = this.state.item;\n        let tmpId = this.state.measuresObjId + 1;\n        this.setState({measuresObjId: tmpId});\n\n        let measuresObj = {\n            \"id\": tmpId,\n            \"name\": \"\",\n            \"unit\": \"\",\n            \"qty\": \"\"\n        };\n        tmpObj.measures = [...tmpObj.measures, measuresObj];\n        this.setState({item: tmpObj});\n    }\n    handleRemoveClick(id,event) {\n        var tmpObj  = this.state.item;\n        tmpObj.measures = this.state.item.measures.filter(o => o.id != id);\n        this.setState({item: tmpObj});   \n    }\n\n\n    render() {\n        return (\n            <div className=\"app flex-row align-items-center\">\n                <div className=\"list-group-header section-header row\">\n                    <div className=\"col\">\n                        <span className=\"mb-1 underline\">Send New </span>\n                        <span className=\"mb-1 blue-color pl-2\">Quote Request</span>\n                    </div>\n                    <div className=\"col text-right\">\n                        <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetQuote()} >Reset</button>\n                        <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.sendQuoteReq()}>Send</button>\n                    </div>\n                </div>\n                <div className=\"blue-box-div\" id=\"create-quote-form\">\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\" className=\"form-control\" id=\"title\"\n                            name=\"title\"\n                            defaultValue={this.state.item.title}\n                            onChange={this.handleFormChange.bind(this, 'title')}\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea className=\"form-control\" id=\"description\" rows=\"3\"\n\n                            defaultValue={this.state.item.desc && this.state.item.desc}\n                            onChange={this.handleFormChange.bind(this, 'desc')}\n\n                        ></textarea>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <div className=\"col\">\n                            <label >Start Date</label>\n                            <DatePicker\n                                selected={this.state.item.startDate && this.state.item.startDate}\n                                onChange={this.handleDateChange.bind(this, 'startDate')}\n                                className=\"form-control\"\n                                minDate={today}\n                            />\n                        </div>\n                        <div className=\"col\">\n                            <label >End Date</label>\n                            <DatePicker\n                                selected={this.state.item.endDate && this.state.item.endDate}\n                                onChange={this.handleDateChange.bind(this, 'endDate')}\n                                className=\"form-control\"\n                                minDate={this.state.item.startDate}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label>Measurements</label>\n                        <button className=\"btn add-btn\" onClick={() => this.addMeasuresClick()}></button>\n                       \n                        {this.state.item.measures.length > 0 && \n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <label>Name</label>\n                            </div>\n                            <div className=\"col\">\n                            <label>Unit</label>\n                            </div>\n                            <div className=\"col\">\n                            <label>Quantity</label>\n                            </div>\n                            <div className=\"col\">\n                            <label></label>\n                            </div>\n                        </div>\n                        }\n\n                        {this.state.item.measures && this.state.item.measures.map((item) => {\n                            return(\n                            <div className=\"row pb-2\" key={item.id}>\n                               <div className=\"col\">\n                                <input type=\"text\" className=\"form-control\"\n                                        defaultValue={item.name}\n                                        onChange={this.handleMeasureChange.bind(this, item.id, 'name')}\n                                    />\n                               </div>\n                               <div className=\"col\">\n                                \n                                    <input type=\"text\" className=\"form-control\"\n                                        defaultValue={item.unit}\n                                        onChange={this.handleMeasureChange.bind(this, item.id, 'unit')}\n                                    />\n                               </div>\n                               <div className=\"col\">\n                                \n                                    <input type=\"number\" className=\"form-control\"\n                                        defaultValue={item.qty}\n                                        onChange={this.handleMeasureChange.bind(this, item.id, 'qty')}\n                                    />\n                               </div>\n                               <div className=\"col\">\n                               <button\n                                className=\"btn measure-delete-btn \"\n                                onClick={this.handleRemoveClick.bind(this,item.id)}></button>\n                               </div>\n                            </div>\n                            )\n\n                        })\n\n                        }\n                    </div>\n\n                    <div>\n                        <label>Attachments</label>\n                        <label className=\"btn btn-blue btn-sm pr-4 pl-4 ml-2\">\n                            Browse <input type=\"file\" hidden onChange={this.handleFileInput.bind(this)}/>\n                        </label>\n                    </div>\n                </div>\n\n\n\n            </div>\n        );\n    }\n}\nexport default UserQuote;\n","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Header.js",["208","209","210","211","212"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteList.js",["213"],"import React, { Component } from 'react';\nimport UserService from \"../services/user.service\";\n\nclass QuoteList extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.getAllQuotes();\n    }\n    \n\n    state = {\n        activeId : 0,\n        searchValue: \"\",\n        listitems: []\n\n    }\n\n    selectQuote(item) {\n        this.props.parentCallback(item);\n        this.setState({\n            activeId:item.id\n          });\n    }\n\n    getAllQuotes() {\n        UserService.getAllQuotes().then(\n            response => {\n                this.setState({\n                    listitems: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n\n    handleChange(e) {\n        this.setState({\n            searchValue: e.target.value.toLowerCase()\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"list-group-header section-header row\">\n                    <div className=\"col-4\">\n                        <span className=\"mb-1 underline\">My Quote</span>\n                        <span className=\"mb-1 blue-color pl-2\">Requests</span>\n                    </div>\n                    <div className=\"col-8\">\n                        <div className=\"has-search\">\n                            <span className=\"fa fa-search form-control-feedback\"></span>\n                            <input type=\"text\" className=\"form-control search-box\" onChange={this.handleChange} placeholder=\"Search quotes...\" />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"list-group\">\n\n                    {this.state.listitems && this.state.listitems.filter(item =>\n                        item.title.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                            <a className={\n                                (listitem.id === this.state.activeId ? \" active list-group-item list-group-item-action\" : \"list-group-item list-group-item-action\")\n                              }\n                            aria-current=\"true\" key={listitem.id} id={listitem.id} onClick={() => this.selectQuote(listitem)} >\n                                <div className=\"d-flex w-100 justify-content-between\">\n                                    <h5 className=\"mb-1 underline half\">{listitem.title}</h5>\n\n                                </div>\n                                <p className=\"mb-1 ellipses_two\">{listitem.desc}</p>\n                                <div>\n                                    {listitem.tools && listitem.tools.map(tool => (\n                                        <span className=\"badge tool-badge\">{tool}</span>\n                                    )\n                                    )}\n                                </div>\n                                <div className=\"row list-item-detail\">\n                                    <div className=\"col-2 calender-icon\">\n                                        <small>{(new Date(listitem.createdAt)).toLocaleDateString()}</small>\n                                    </div>\n                                    <div className=\"col-5 flag-icon\">\n                                        <small>{listitem.status}</small>\n                                        <span className=\"date-badge badge\">{(new Date(listitem.updatedAt)).toLocaleDateString()}</span>\n                                    </div>\n\n                                    <div className=\"col-3 attachment-icon\">\n                                        <small>{listitem.Uploads}</small>\n                                        <small> Attachments</small>\n                                    </div>\n                                    <div className=\"col-2 rightarrow-icon\">\n                                        <small>View details</small>\n                                    </div>\n                                </div>\n                            </a>\n\n                        ))}\n\n                </div>\n\n            </React.Fragment>\n        );\n    }\n}\nexport default QuoteList;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/user/QuoteDetail.js",["214","215","216","217"],"import React, { Component } from 'react';\nimport S3 from 'react-aws-s3';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport UserService from \"../services/user.service\";\n\nimport Popup from \"../components/Popup\";\n\nconst today = new Date();\nclass QuoteDetail extends Component {\n    state = {\n        formInputList: this.props.dataFromParent.Measures,\n        selectedItem: this.props.dataFromParent,\n        measuresObjId: this.props.dataFromParent.Measures.length,\n        popupConfig: {},\n        isPopupOpen: false\n    }\n    constructor(props) {\n        super(props);\n        let newMeasuresArray = this.state.selectedItem.Measures && this.state.selectedItem.Measures.map(function (item, index) {\n            item.id = index + 1;\n            return item;\n        });\n        let newObj = this.state.selectedItem;\n        newObj.Measures = newMeasuresArray;\n        this.setState({\n            selectedItem: newObj\n        })\n    }\n    handleFormChange(propertyName, event) {\n        var item = this.state.selectedItem;\n        item[propertyName] = event.target.value;\n        this.setState({ selectedItem: item });\n    }\n\n    handleDateChange(propertyName, event) {\n        var item = this.state.selectedItem;\n        item[propertyName] = new Date(event);\n        this.setState({ selectedItem: item });\n    }\n\n    handleMeasureChange(id, propertyName, event) {\n        var tmpObj = this.state.selectedItem;\n        tmpObj.Measures.find(o => o.id == id)[propertyName] = event.target.value;\n        this.setState({ selectedItem: tmpObj });\n    }\n\n    newQuote() {\n        this.props.parentCallback();\n    }\n    editQuote() {\n        this.props.parentEditCallBack();\n    }\n    saveQuote() {\n        let newMeasuresArray = this.state.selectedItem.Measures.map(function(item) { \n            delete item.id; \n            return item; \n        });\n\n        var data = {\n            \"title\": this.state.selectedItem.title,\n            \"desc\": this.state.selectedItem.desc,\n            \"measures\": newMeasuresArray\n        };\n        UserService.editQuote(this.state.selectedItem.id, data).then(\n            response => {\n                //this.props.parentCreateCallBack(response.data);\n                //console.log(response.data);\n                debugger;\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    addMeasuresClick() {\n        let tmpObj = this.state.selectedItem;\n        let tmpId = this.state.measuresObjId + 1;\n        this.setState({ measuresObjId: tmpId });\n\n        let measuresObj = {\n            \"id\": tmpId,\n            \"name\": \"\",\n            \"unit\": \"\",\n            \"qty\": \"\"\n        };\n        tmpObj.Measures = [...tmpObj.Measures, measuresObj];\n        this.setState({ selectedItem: tmpObj });\n    }\n\n    handleRemoveClick(id, event) {\n        \n        var tmpObj = this.state.selectedItem;\n        tmpObj.Measures = this.state.selectedItem.Measures.filter(o => o.id != id);\n        this.setState({ selectedItem: tmpObj }); \n    }\n    handleClose = () => {\n        this.setState({\n            isPopupOpen: false\n        });\n    }\n    removeUploadedImage(file) {\n\n\n        const config = {\n            bucketName: 'fuentes-fileupload',\n            dirName: 'quote-attachments',\n            region: 'us-west-1',\n            accessKeyId: 'AKIA5ARA5MYMNVC47U6F',\n            secretAccessKey: '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'\n        }\n       \n       \n        const ReactS3Client = new S3(config);\n\n        const filename = file.fileName;\n\n        ReactS3Client\n            .deleteFile(filename)\n            .then(response => console.log(response))\n            .catch(err => console.error(err))\n\n\n\n\n    }\n    showUploadImage(filePath) {\n        this.setState({\n            isPopupOpen: true,\n            popupConfig: {\n                header: \"Uploaded Data\",\n                body: filePath,\n                type: \"image\"\n            }\n        });\n    }\n    renderUploadsSection(uploads) {\n        if(uploads.length > 0){\n        return (\n           \n                <div className=\"form-group\">\n                <span className=\"underline blue\">Uploads</span>\n                {uploads.map((item, index) => {\n                    return (\n                        <div className=\"row pb-2\" >\n                            <div className=\"col pl-0\">\n                                <button className=\"btn btn-link\" onClick={() => this.showUploadImage(item.filePath)}>{item.fileName}</button>\n                            </div>\n                        </div>\n                    )\n                })\n    \n                }\n            </div>\n            \n           \n        \n        \n        \n        );\n            }\n    }\n    renderMeasurementsDetailSection(measures) {\n\n        return (<div className=\"form-group\">\n            <span className=\"underline blue\">Measurements</span>\n            {measures.length > 0 &&\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <label>Name</label>\n                    </div>\n                    <div className=\"col\">\n                        <label>Unit</label>\n                    </div>\n                    <div className=\"col\">\n                        <label>Quantity</label>\n                    </div>\n                </div>\n            }\n\n            {measures && measures.map((item, index) => {\n                return (\n                    <div className=\"row pb-2 green-text-color\" key={item.id}>\n                        <div className=\"col\">\n                            <label>{item.name}</label>\n                        </div>\n                        <div className=\"col\">\n                            <label>{item.unit}</label>\n                        </div>\n                        <div className=\"col\">\n                            <label>{item.qty}</label>\n                        </div>\n\n                    </div>\n                )\n            }\n            )\n\n            }\n        </div>);\n    }\n    renderMeasurementsSection(measures) {\n\n        return (<div className=\"form-group\">\n            <label>Measurements</label>\n            <button className=\"btn add-btn\" onClick={() => this.addMeasuresClick()}></button>\n\n            {measures.length > 0 &&\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <label>Name</label>\n                    </div>\n                    <div className=\"col\">\n                        <label>Unit</label>\n                    </div>\n                    <div className=\"col\">\n                        <label>Quantity</label>\n                    </div>\n                    <div className=\"col\">\n                        <label></label>\n                    </div>\n                </div>\n            }\n\n            {measures && measures.map((item, index) => {\n                return (\n                    <div className=\"row pb-2\" key={item.id}>\n                        <div className=\"col\">\n                            <input type=\"text\" className=\"form-control\"\n                                defaultValue={item.name}\n                                onChange={this.handleMeasureChange.bind(this, item.id, 'name')}\n                            />\n                        </div>\n                        <div className=\"col\">\n\n                            <input type=\"text\" className=\"form-control\"\n                                defaultValue={item.unit}\n                                onChange={this.handleMeasureChange.bind(this, item.id, 'unit')}\n                            />\n                        </div>\n                        <div className=\"col\">\n\n                            <input type=\"text\" className=\"form-control\"\n                                defaultValue={item.qty}\n                                onChange={this.handleMeasureChange.bind(this, item.id, 'qty')}\n                            />\n                        </div>\n                        <div className=\"col\">\n                            <button\n                                className=\"btn measure-delete-btn \"\n                                onClick={this.handleRemoveClick.bind(this, item.id)}></button>\n                        </div>\n                    </div>\n                )\n\n            })\n\n            }\n        </div>);\n    }\n\n    renderEditQuote() {\n        var selectedQuote = this.props.dataFromParent;\n        if (selectedQuote) {\n            return (\n                <div className=\"blue-box-div\">\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\" className=\"form-control\" id=\"title\"\n                            defaultValue={selectedQuote.title}\n                            onChange={this.handleFormChange.bind(this, 'title')}\n                        />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"description\">Description</label>\n                        <textarea className=\"form-control\" id=\"description\" rows=\"3\"\n                            defaultValue={selectedQuote.desc}\n                            onChange={this.handleFormChange.bind(this, 'desc')}\n                        ></textarea>\n                    </div>\n\n                    <div className=\"form-group row\">\n                        <div className=\"col\">\n                            <label >Start Date</label>\n                            <DatePicker\n                                selected={new Date(selectedQuote.startDate)}\n                                onChange={this.handleDateChange.bind(this, 'startDate')}\n                                className=\"form-control\"\n                                minDate={today}\n                            />\n                        </div>\n                        <div className=\"col\">\n                            <label >End Date</label>\n                            <DatePicker\n                                selected={new Date(selectedQuote.endDate)}\n                                onChange={this.handleDateChange.bind(this, 'endDate')}\n                                className=\"form-control\"\n                                minDate={new Date(selectedQuote.startDate)}\n                            />\n                        </div>\n                    </div>\n\n                    {this.renderMeasurementsSection(selectedQuote.Measures)}\n\n                    <div className=\"form-group\">\n                        <label>Attachments</label>\n                        <label className=\"btn btn-blue btn-sm pr-4 pl-4 ml-2\">\n                            Browse <input type=\"file\" hidden />\n                        </label>\n\n                        <div className=\"col-3 attachment-icon\">\n                            <small>{selectedQuote.Uploads && selectedQuote.Uploads.length}</small>\n                            <small>Attachments</small>\n                        </div>\n                        <div className=\"row pb-2\" >\n                            {selectedQuote.Uploads && selectedQuote.Uploads.map((item, index) => {\n                                return (\n                                    <div className=\"\">\n                                        <button className=\"btn btn-link\" onClick={() => this.showUploadImage(item.filePath)}>{item.fileName}</button>\n                                        <button class=\"btn remove-btn\" onClick={() => this.removeUploadedImage(item)}></button>\n                                    </div>\n                                )\n                            })\n                            }\n                        </div>\n\n                    </div>\n                </div>\n            )\n        }\n    }\n    \n    linkPOUrl(file){\n        var data = {\n            \"submit_PO\": file.location\n        };\n        UserService.savePOUrl(this.state.selectedItem.id, data).then(\n            response => {\n                alert(response.data.message);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    handleFileInput(e) {\n        const file = e.target.files[0];\n        if (file) {\n            const config = {\n                bucketName: 'fuentes-fileupload',\n                dirName: 'purchase-order',\n                region: 'us-west-1',\n                accessKeyId: 'AKIA5ARA5MYMNVC47U6F',\n                secretAccessKey: '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'\n            }\n            const ReactS3Client = new S3(config);\n            const newFileName = 'test-file';\n\n            ReactS3Client\n                .uploadFile(file, newFileName)\n                .then(data => {\n                    this.linkPOUrl(data);\n                    //TODO: Change status QUOTE_PO_SUBMIT\n                    // Save var newfilePath = data.location;\n                    \n                })\n                .catch(err => console.error(err))\n        }\n    }\n\n\n    renderQuoteDetails() {\n        if (this.props.dataFromParent) {\n            return (\n                <div className=\"blue-box-div\">\n                    <div>\n                        <span className=\"underline blue\">Title</span>\n                        <p>{this.props.dataFromParent.title}</p>\n                    </div>\n                    <div>\n                        <span className=\"underline blue\">Description</span>\n                        <p>{this.props.dataFromParent.desc}</p>\n                    </div>\n\n                    <div className=\"row\">\n                        \n                        <div className=\"col\">\n                            <span className=\"underline blue mb-2\">Submitted On</span>\n                            <p>{(new Date(this.props.dataFromParent.createdAt)).toLocaleDateString()}</p>\n                        </div>\n                        <div className=\"col\">\n                            <span className=\"underline blue\">Tentitive Start Date</span>\n                            <p>{(new Date(this.props.dataFromParent.startDate)).toLocaleDateString()}</p>\n                        </div>\n                        <div className=\"col\">\n                            <span className=\"underline blue\">Tentitive End Date</span>\n                            <p>{(new Date(this.props.dataFromParent.endDate)).toLocaleDateString()}</p>\n                        </div>\n                    </div>\n                    {this.renderUploadsSection(this.props.dataFromParent.Uploads)}\n\n                    {this.props.dataFromParent.status == \"QUOTE_RECEIVED\" &&\n                    <div class=\"purchase-order d-inline-block form-group\">\n                        <span className=\"underline blue mb-2\">Order details</span>\n                        <div class=\"row ml-2\">\n                            <div class=\"col-md-8\">Operation Cost</div>\n                            <div class=\"col-md-2\">2</div>\n                            <div class=\"col-md-8\">Inspection Amount</div>\n                            <div class=\"col-md-2\">1</div>\n                            <div class=\"col-md-8\">Sub Total</div>\n                            <div class=\"col-md-2\">3</div>\n                            <div class=\"col-md-8\">Total tax</div>\n                            <div class=\"col-md-2\">5%</div>\n                            <div class=\"col-md-8\"></div>\n                            <div class=\"col-md-2\"></div>\n                            <div class=\"col-md-8\">Total Cost</div>\n                            <div class=\"col-md-2\">8</div>\n                        </div>\n                    </div>\n                    \n                }\n                   \n\n                   \n\n                    <div className=\"d-inline-block\">\n                        \n                        <div className=\"col pl-0\">\n                            <span className=\"underline blue mb-2\">Status</span>\n                            <p> {this.props.dataFromParent.status}\n\n                                {this.props.dataFromParent.status == \"QUOTE_RECEIVED\" &&\n                                    <label className=\"btn btn-green btn-sm pr-4 pl-4 ml-2\">\n                                        Submit P O <input type=\"file\" hidden onChange={this.handleFileInput.bind(this)} />\n                                    </label>\n                                }\n\n                            </p>\n                        </div>\n                    </div>\n\n\n                    {this.renderMeasurementsDetailSection(this.props.dataFromParent.Measures)}\n                </div>\n                /*<div className=\"blue-box-div\">\n                    <div>\n                        <span className=\"underline blue\">Title</span>\n                        <p>{this.props.dataFromParent.title}</p>\n                    </div>\n                    <div>\n                        <span className=\"underline blue\">Description</span>\n                        <p>{this.props.dataFromParent.desc}</p>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-4\">\n                            <span className=\"underline blue\">Submitted On</span>\n                            <p>{(new Date(this.props.dataFromParent.createdAt)).toLocaleDateString()}</p>\n                        </div>\n                        <div className=\"col-sm\">\n                            <span className=\"underline blue\">Status</span>\n                            <p> {this.props.dataFromParent.status}\n                                <button type=\"button\" className=\"btn btn-blue btn-sm pr-2 pl-2 mr-2 ml-2\" >View</button>\n                                <button type=\"button\" className=\"btn btn-green btn-sm pr-2 pl-2\" >Submit PO</button>\n                            </p>\n                        </div>\n\n                    </div>\n                    <div>\n                        <span className=\"underline blue\" >Measurements</span>\n                    </div>\n\n                    {this.renderMeasurementHeader()}\n                    {this.props.dataFromParent.Measures && this.props.dataFromParent.Measures.map((x, i) => {\n                        return (this.renderMeasurements(x, i));\n                    })}\n\n                    <div>\n                        <span className=\"underline blue\" >Attachments</span>\n\n                        <div className=\"row mt-1\">\n                            {this.props.dataFromParent.Uploads && this.props.dataFromParent.Uploads.map((item) => {\n                                return (\n                                    <div className=\"col-sm\">\n                                        <span >{item['fileName']}</span>\n                                    </div>\n                                )\n                            })}\n                        </div>\n\n                    </div>\n                </div>*/\n\n            );\n        }\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Popup popupConfig={this.state.popupConfig} openFlag={this.state.isPopupOpen} parentCloseCallback={this.handleClose} ></Popup>\n\n                <div className=\"app flex-row align-items-center\" >\n\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col\">\n                            <span className=\"mb-1 underline\">Quote </span>\n                            <span className=\"mb-1 blue-color pl-2\"> Detail</span>\n                        </div>\n                        <div className=\"col text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.newQuote()}>New</button>\n\n\n                            {this.props.isQuoteEditActive\n                                ? <button type=\"button\" className=\"btn btn-green btn-sm pr-4 pl-4 ml-2\" onClick={() => this.saveQuote()}>Save</button>\n                                : <button type=\"button\" className=\"btn btn-green btn-sm pr-4 pl-4 ml-2\" onClick={() => this.editQuote()}>Edit</button>\n                            }\n\n                        </div>\n                    </div>\n\n                    {this.props.isQuoteEditActive\n                        ? this.renderEditQuote()\n                        : this.renderQuoteDetails()\n                    }\n\n                </div>\n            </React.Fragment>\n        );\n    }\n}\nexport default QuoteDetail;\n\n\n\n\n","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Routes.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Footer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/AdminDashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInventory.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditInventory.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageOperations.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditOperations.js",["218","219","220","221","222","223","224"],"import React, { Component } from 'react';\n\nimport MyAlert from \"../components/MyAlert\";\nimport AdminService from \"../services/admin.service\";\n\nclass EditOperations extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: [],\n            toolsList: [],\n            selectedTool: {},\n            showAlert: false,\n            alertConfig: {\n                \"variant\": \"danger\"\n            },\n            //workerList: [],\n            //selectedWorker: {}\n        }\n        this.getOperationById();\n        this.getAllTools();\n        //this.getAllWorkers();\n    }\n    getOperationById() {\n        AdminService.getOperationById(this.props.selectedId).then(\n            response => {\n                this.setState({\n                    item: response.data\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    getAllTools() {\n        AdminService.getAllInventory().then(\n            response => {\n                this.setState({\n                    toolsList: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    /*getAllWorkers() {\n        AdminService.getAllWorkers().then(\n            response => {\n                this.setState({\n                    workerList: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    } */\n\n    handleChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    handleToolSelection(event) {\n        var selectedTool = this.state.toolsList.find(o => o.id == event.target.value);\n        var newToolItem = {\n            \"Inventories\": selectedTool,\n            \"req_avail\": this.state.item.toolRequired\n        };\n        this.setState({ selectedTool: newToolItem });\n    }\n    /*handleWorkerSelection(event) {\n        this.state.selectedWorker = this.state.workerList.find(o => o.id == event.target.value);\n    }*/\n    showAlertMessage(msg) {\n        this.setState(prevState => ({\n            alertConfig: { \n                ...prevState.alertConfig,\n                message: msg\n            },\n            showAlert: true \n        }))\n    }\n\n    addTools(event) {\n        if (!this.state.selectedTool.Inventories || !this.state.item.toolRequired) {\n            this.showAlertMessage(\"Please select Tools / Materials and add Required quantity\");\n        } else {\n            this.setState({ showAlert: false });\n\n            if (this.state.item.id) {\n\n                this.state.selectedTool['req_avail'] = this.state.item.toolRequired;\n                var selectedOperation = this.state.item;\n                selectedOperation.OperationInventories.push(this.state.selectedTool);\n                this.setState({ item: selectedOperation });\n            } else {\n                var selectedOperation = this.state.item;\n                if (!selectedOperation.OperationInventories) {\n                    selectedOperation['OperationInventories'] = [];\n                }\n                var required_qty = this.state.item.toolRequired;\n                this.state.selectedTool['req_avail'] = required_qty;\n\n                selectedOperation.OperationInventories.push(this.state.selectedTool);\n                this.setState({ item: selectedOperation });\n            }\n        }\n    }\n    /*addWorker(event) {\n        if (this.state.item.id) {\n            this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n            this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n            var selectedOperation = this.state.item;\n            selectedOperation.OperationWorkers.push(this.state.selectedWorker);\n            this.setState({ item: selectedOperation });\n        } else {\n            debugger;\n            var selectedOperation = this.state.item;\n            if (!selectedOperation.OperationWorkers) {\n                selectedOperation['OperationWorkers'] = [];\n            }\n            this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n            this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n\n            selectedOperation.OperationWorkers.push(this.state.selectedWorker);\n            this.setState({ item: selectedOperation });\n        }\n\n    }*/\n\n    saveOperation() {\n        console.log(this.state.item);\n        var tmpworkerobj = [];\n        this.state.item.OperationWorkers.map((item, i) => {\n            if (item.id) {\n                var workerobj = {};\n                workerobj[\"id\"] = item.id;\n                workerobj[\"required_hrs\"] = item.required_hrs;\n                workerobj[\"est_cost\"] = item.est_cost;\n                tmpworkerobj.push(workerobj);\n            }\n        });\n        var tmpInvobj = [];\n        this.state.item.OperationInventories.map((item, i) => {\n            if (item.id) {\n                var invobj = {};\n                invobj[\"id\"] = item.id;\n                invobj[\"required_qty\"] = item.required_qty;\n                tmpInvobj.push(invobj);\n            }\n        });\n        var data = {\n            \"name\": this.state.item.name,\n            \"desc\": this.state.item.desc,\n            \"items\": tmpInvobj,\n            \"workers\": tmpworkerobj\n        };\n\n\n\n        if (this.state.item.id != undefined) {\n            AdminService.editOperation(this.state.item.id, data).then(\n                response => {\n                    console.log(response.data.message);\n                    //this.showPopupMessage(response.data.message);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        } else {\n\n            AdminService.createOperation(data).then(\n                response => {\n                    console.log(response.data.message);\n                    //this.showPopupMessage(response.data.message);\n                },\n                error => {\n                    console.log(\"Error\");\n                }\n            );\n        }\n        this.props.parentCallback();\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    renderToolsList() {\n        return (\n            <div className=\"col\">\n                <div className=\"row\">\n                    <div className=\"col-6\"><span>Tools and Materials</span></div>\n                    <div className=\"col-6\"><span>Required</span></div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-6\">\n                        <select className=\"form-control\" onChange={this.handleToolSelection.bind(this)}>\n                            <option>Select Tools</option>\n                            {this.state.toolsList.map((toolItem) => (\n                                <option key={toolItem.id} value={toolItem.id}>{toolItem.itemName}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"col-6\">\n                        <input type=\"number\" className=\"form-control col-6 d-inline\" onChange={this.handleChange.bind(this, 'toolRequired')} />\n                        <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4 d-inline\" onClick={this.addTools.bind(this)}>Add</button>\n                    </div>\n                    <div className=\"font-italic text-center col-8\">\n                    {this.state.showAlert && < MyAlert alertConfig = {this.state.alertConfig} /> }\n                    </div>\n                    \n                </div>\n                <div className=\"row mt-1 quote-req-header font-weight-bold\">\n                    <div className=\"col-sm\">\n                        <label>Tool/Material Name</label>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label>Required</label>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label>Availability</label>\n                    </div>\n                </div>\n\n                {this.state.item.OperationInventories.map((item) => (\n\n                    <div className=\"row mt-1\">\n                        <div className=\"col-sm\">\n                            <label>{item.Inventories && item.Inventories.itemName}</label>\n                        </div>\n                        <div className=\"col-sm\">\n                            <label>{item.req_avail}</label>\n                        </div>\n                        <div className=\"col-sm\">\n                            <label>{item.Inventories && item.Inventories.availability}</label>\n                        </div>\n                    </div>\n\n                ))}\n            </div>\n\n        );\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.state.item &&\n                    <div className=\"col edit-inventory\">\n                        <div className=\"list-group-header section-header row\">\n                            <div className=\"col-4\">\n\n                                <nav aria-label=\"breadcrumb\">\n                                    <ul className=\"breadcrumb\">\n                                        <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                            <span className=\"mb-1 underline\">Manage</span>\n                                            <span className=\"mb-1 blue-color pl-2\">Operation</span>\n                                        </li>\n                                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                            <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                            <span className=\"mb-1 blue-color pl-2\">Operation</span>\n                                        </li>\n                                    </ul>\n                                </nav>\n\n                            </div>\n                            <div className=\"col-8 text-right\">\n                                <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                                <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveOperation()}>Save</button>\n                            </div>\n                        </div>\n\n                        <div className=\"blue-box-div row\">\n                            <div className=\"col-4 white-border-right\">\n                                <div>\n                                    <span>Operation Name</span>\n                                    <input type=\"text\"\n                                        className=\"form-control\" defaultValue={this.state.item.name}\n                                        onChange={this.handleChange.bind(this, 'name')} />\n                                </div>\n                                <div>\n                                    <span>Description</span>\n                                    <textarea className=\"form-control\" rows=\"3\"\n                                        defaultValue={this.state.item.desc}\n                                        onChange={this.handleChange.bind(this, 'desc')}></textarea>\n                                </div>\n\n                            </div>\n                            {this.state.item.OperationInventories && this.renderToolsList()}\n\n\n                        </div>\n                    </div>\n                }\n\n            </React.Fragment>\n        );\n    }\n}\nexport default EditOperations;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Utils.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageWorker.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditWorker.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageProjects.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditProject.js",["225","226","227"],"import React, { Component } from 'react';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AdminService from \"../services/admin.service\";\nimport Popup from \"../components/Popup\";\n\nclass EditProject extends Component {\n    constructor(props) {\n        super(props);\n        this.getAllWorkers();\n    }\n    state = {\n        item: this.props.selectedItem,\n        workerList: [],\n        selectedWorker: {},\n        popupConfig: {},\n        isPopupOpen: false\n    }\n    handleChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    handleDateChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = new Date(event);\n        this.setState({ item: item });\n    }\n    handleClose = () => {\n        this.setState({\n            isPopupOpen: false\n        });\n    }\n    showPopupMessage(message) {\n        this.setState({\n          isPopupOpen: true,\n          popupConfig: {\n            header: \"Message\",\n            body: message,\n            type: \"message\"\n          }\n        });\n    }\n    saveProject() {\n        \n        debugger;\n        var data = {\n            \"name\": this.state.item.name,\n            \"desc\": this.state.item.desc,\n            \"startDate\": this.state.item.start_date,\n            \"endDate\": this.state.item.end_date,\n            \"workers\": this.state.item.workers\n        };\n        AdminService.editProject(this.state.item.id,data).then(\n            response => {\n                this.showPopupMessage(response.data.message);\n                this.props.parentCallback();\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    resetReq() {\n\n    }\n    handleBreadCrumb() {\n        this.props.parentCallback();\n    }\n    getAllWorkers() {\n        AdminService.getAllWorkers().then(\n            response => {\n                this.setState({\n                    workerList: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    statusChange(event) {\n        var data = {\n            \"status\" : \"CLOSED\"\n        };\n        AdminService.changeProjectStatus(this.state.item.id,data).then(\n            response => {\n                this.showPopupMessage(response.data.message);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    handleWorkerSelection(event) {\n        this.state.selectedWorker = this.state.workerList.find(o => o.id == event.target.value);\n    }\n    addWorker(event) {\n            debugger;\n            this.state.selectedWorker['required_hrs'] = this.state.item.workerRequired;\n            //this.state.selectedWorker['est_cost'] = parseInt(this.state.item.workerRequired) * parseInt(this.state.selectedWorker.cost_per_hr);\n            var selectedProject = this.state.item;\n            if(!selectedProject.workers){\n                selectedProject['workers'] = [];\n            }\n            selectedProject.workers.push(this.state.selectedWorker);\n            this.setState({ item: selectedProject });\n            console.log(this.state.item);\n        \n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"col edit-inventory\">\n                    <div className=\"list-group-header section-header row\">\n                        <div className=\"col-4\">\n\n                            <nav aria-label=\"breadcrumb\">\n                                <ul className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                                        <span className=\"mb-1 underline\">Manage</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Project</span>\n                                    </li>\n                                    <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                                        <span className=\"mb-1\">{(this.state.item.length !== 0) ? 'Edit' : 'Add'}</span>\n                                        <span className=\"mb-1 blue-color pl-2\">Project</span>\n                                    </li>\n                                </ul>\n                            </nav>\n\n                        </div>\n                        <div className=\"col-8 text-right\">\n                            <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                            <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveProject()}>Save</button>\n                        </div>\n                    </div>\n\n                    <div className=\"blue-box-div row\">\n                        <div className=\"col white-border-right\">\n                            <div>\n                                <span>Project Name</span>\n                                <input type=\"text\"\n                                    className=\"form-control\" defaultValue={this.state.item.name}\n                                    onChange={this.handleChange.bind(this, 'name')} />\n                            </div>\n                            <div>\n                                <span>Description</span>\n                                <textarea className=\"form-control\" rows=\"3\"\n                                    defaultValue={this.state.item.desc}\n                                    onChange={this.handleChange.bind(this, 'desc')}></textarea>\n                            </div>\n\n                            <div>\n                                <span>Start Date</span>\n                                <DatePicker\n                                    selected={new Date(this.state.item.start_date)}\n                                    onChange={this.handleDateChange.bind(this, 'start_date')}\n                                    className=\"form-control\"\n                                    minDate = {new Date()}\n                                />\n                            </div>\n                            <div>\n                                <span>End Date</span>\n                                <DatePicker\n                                    selected={new Date(this.state.item.end_date)}\n                                    onChange={this.handleDateChange.bind(this, 'end_date')}\n                                    className=\"form-control\"\n                                    minDate={new Date(this.state.item.start_date)}\n                                />\n                            </div>\n                        </div>\n\n                        <div className=\"col\">\n                            \n\n                        <div className=\"row\">\n                                <div className=\"col\"><span>Worker</span></div>\n                                <div className=\"col\"><span>Required Hours</span></div>\n                            </div>\n\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <select className=\"form-control\" onChange={this.handleWorkerSelection.bind(this)}>\n                                        <option selected>Select Worker</option>\n                                        {this.state.workerList.map((item) => (\n                                            <option key={item.id} value={item.id}>{item.name}</option>\n                                        ))}\n                                    </select>\n                                </div>\n\n                                <div className=\"col\">\n                                    <input type=\"number\" className=\"form-control col-2 d-inline\" onChange={this.handleChange.bind(this, 'workerRequired')}/>\n                                    <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4 d-inline\" onClick={this.addWorker.bind(this)}>Add</button>\n                                </div>\n\n                            </div>\n\n                            <div className=\"row mt-1 quote-req-header font-weight-bold\">\n                                    <div className=\"col-sm\">\n                                        <label>Name</label>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <label>Profession</label>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <label>Available Hours </label>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <label>Required Hours</label>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <label>Cost per hour</label>\n                                    </div>\n                                    <div className=\"col-sm\">\n                                        <label>Estimated Cost</label>\n                                    </div>\n                                </div>\n\n\n                                {this.state.item.workers && this.state.item.workers.map(listitem => (\n\n<div className=\"row mt-1\" >\n    <div className=\"col-sm\" >\n        <label className=\"description-truncate text-truncate\">{listitem.name}</label>\n    </div>\n    <div className=\"col-sm\" >\n        <label>{listitem.name}</label>\n    </div>\n    <div className=\"col-sm\" >\n        <label>{ listitem.avail_per_day}</label>\n    </div>\n    <div className=\"col-sm\" >\n        <label>{ listitem.required_hrs}</label>\n    </div>\n    <div className=\"col-sm\" >\n        <label>{ listitem.cost_per_hr}</label>\n    </div>\n    <div className=\"col-sm\" >\n        <label>{listitem.cost_per_hr * listitem.required_hrs}</label>\n    </div>\n</div>\n\n))}\n\n\n                            <div className=\"row\">\n                            <button type=\"button\" className=\"btn btn-green btn-sm m-4 pr-4 pl-4 d-inline\" onClick={this.statusChange.bind(this)}>Project Completed</button>\n                            </div>\n\n\n                        </div>\n                    </div>\n                </div>\n\n                <Popup popupConfig={this.state.popupConfig} openFlag={this.state.isPopupOpen} parentCloseCallback={this.handleClose} ></Popup>\n            </React.Fragment>\n        );\n    }\n}\nexport default EditProject;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageCustomer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditCustomer.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageInspections.js",["228"],"import React, { Component } from 'react';\nimport Popup from \"../components/Popup\";\nimport { validationMessages } from '../common/Constants';\n\nimport AdminService from \"../services/admin.service\";\n\n\nclass ManageInspection extends Component {\n    state = {\n        \n        selectedItem: [],\n        editInspectionPage: false,\n        popupConfig: {},\n        isPopupOpen: false\n    }\n    constructor(props) {\n        super(props);\n        this.getAllInspectionList();\n    }\n    getAllInspectionList() {\n        AdminService.getAllInspection().then(\n            response => {\n                if(response){\n                    this.setState({\n                        listitems: response.data.inspections.rows\n                    });\n                }\n            },\n            error => {\n              console.log(\"Error\");\n            }\n          );\n    }\n\n    editInspection() {\n       \n        if (this.state.selectedItem && this.state.selectedItem.length === 0) {\n            this.showPopup(validationMessages.NO_ITEM);\n        } else {\n            this.setState({\n                editInspectionPage: true\n            });\n        }\n    }\n    addInspection() {\n        this.setState({\n            selectedItem: []\n        });\n        this.setState({\n            editInspectionPage: true\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            isPopupOpen: false\n        });\n    }\n\n    handleModalYes = () => {\n        this.setState({\n            isPopupOpen: false\n        });\n        AdminService.deleteInspection(this.state.selectedItem.id).then(\n            response => {\n                this.showPopup(response.data.message);\n                var tempList = this.state.listitems.filter(item => item.id !== this.state.selectedItem.id);\n                this.setState({\n                    listitems: tempList,\n                    selectedItem: []\n                });\n            },\n            error => {\n              console.log(\"Error\");\n            }\n          );  \n    }\n\n    deleteInspection() {\n        /*var tempList = this.state.listitems.filter(item => item.id !== this.state.selectedItem.id);\n        this.setState({\n            listitems: tempList\n        });\n        */\n        if (this.state.selectedItem && this.state.selectedItem.length === 0) {\n            this.showPopup(validationMessages.NO_ITEM);\n        } else {\n            this.setState({\n                isPopupOpen: true,\n                popupConfig : {\n                    header: \"Confirm to Delete\",\n                    body:validationMessages.DELETE_CONFIRM+this.state.selectedItem.name,\n                    type: \"confirmation\"\n                }\n            });\n        }\n\n    }\n    onInspectionSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    parentCallback = () => {\n        this.setState({\n            editInspectionPage: false\n        });\n    }\n    handleFormChange(propertyName, event) {\n       \n    }\n    saveTaxUpdate() {\n\n    }\n    handleBreadCrumb() {\n        this.setState({\n            editInspectionPage: false\n        });\n    }\n    handleChange(propertyName, event) {\n        var item = this.state.selectedItem;\n        item[propertyName] = event.target.value;\n        this.setState({ selectedItem: item });\n    }\n    showPopup(message){\n        this.setState({\n            isPopupOpen: true,\n            popupConfig : {\n                header: \"Message\",\n                body:message,\n                type: \"message\"\n            }\n        });\n    }\n    saveInspection() {\n        if(this.state.selectedItem.id !== undefined) {\n            var data = {\n                \"name\": this.state.selectedItem.name,\n                \"cost\": parseInt(this.state.selectedItem.cost),\n                \"desc\": this.state.selectedItem.desc\n            };\n\n            AdminService.editInspection(this.state.selectedItem.id ,data).then(\n                response => {\n                    if(response){\n                        this.showPopup(response.data.message);\n                    }\n                },\n                error => {\n                  console.log(\"Error\");\n                }\n              );\n            \n\n\n        } else {\n            var data = {\n                \"name\": this.state.selectedItem.name,\n                \"cost\": parseInt(this.state.selectedItem.cost),\n                \"desc\": this.state.selectedItem.desc\n            };\n            AdminService.createInspection(data).then(\n                response => {\n                    if(response){\n                        this.showPopup(response.data.message);\n                    }\n                },\n                error => {\n                  console.log(\"Error\");\n                }\n              );\n            \n        }\n        \n    }\n  \n    renderEditInspection() {\n        return(<div className=\"col edit-customer\">\n        <div className=\"list-group-header section-header row\">\n            <div className=\"col-6\">\n\n                <nav aria-label=\"breadcrumb\">\n                    <ul className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                            <span className=\"mb-1 underline\">Manage</span>\n                            <span className=\"mb-1 blue-color pl-2\">Inspection</span>\n                        </li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n                            <span className=\"mb-1\">{(this.state.selectedItem.length !== 0) ? 'Edit' : 'Add'}</span>\n                            <span className=\"mb-1 blue-color pl-2\">Customer</span>\n                        </li>\n                    </ul>\n                </nav>\n\n            </div>\n            <div className=\"col-6 text-right\">\n                <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\"  >Reset</button>\n                <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveInspection()}>Save</button>\n            </div>\n        </div>\n\n        <div className=\"blue-box-div row\">\n            <div className=\"col\">\n                <div>\n                    <span>Inspection Name</span>\n                    <input type=\"text\"\n                        className=\"form-control\" defaultValue={this.state.selectedItem.name}\n                        onChange={this.handleChange.bind(this, 'name')} />\n                </div>\n                \n                <div>\n                    <span>Description</span>\n                    <textarea className=\"form-control\" rows=\"3\" \n                                    defaultValue={this.state.selectedItem.desc}\n                                    onChange={this.handleChange.bind(this, 'desc')}\n                        ></textarea>\n                \n                </div>\n                <div>\n                    <span>Cost</span>\n                    <input type=\"number\"\n                        className=\"form-control\"  defaultValue={this.state.selectedItem.cost}\n                        onChange={this.handleChange.bind(this, 'cost')}/>\n                </div>\n                \n                \n            </div>\n           \n\n        </div>\n\n\n\n    </div>);\n    }\n    renderTax() {\n        return(\n            <div className=\"col admin-list-page\">\n                <div className=\"list-group-header section-header row\">\n                <div className=\"col-3\">\n                    <span className=\"mb-1 underline\">Manage</span>\n                    <span className=\"mb-1 blue-color pl-2\">Tax</span> \n                </div>\n            </div>\n            <div className=\"col-6 blue-box-div tax-div d-inline-block\">\n                            <label className=\"pr-2\">Tax</label>\n                            <input type=\"number\" className=\"form-control d-inline-block\"\n                                        \n                                        onChange={this.handleFormChange.bind(this, 'tax')}\n                                    />\n                            <label className=\"pl-2\">%</label>\n\n\n              <button type=\"button\" className=\"btn btn-info btn-sm float-right mr-4\" onClick={() => this.saveTaxUpdate()}>Update</button>\n\n            </div>\n            </div>\n        );\n    }\n    renderInspectionList() {\n        return (<div className=\"col admin-list-page\">\n            <div className=\"list-group-header section-header row\">\n                <div className=\"col-6\">\n                    <span className=\"mb-1 underline\">Manage</span>\n                    <span className=\"mb-1 blue-color pl-2\">Inspection</span>\n\n                    \n                </div>\n                <div className=\"col-6 text-right inspection-btngrp pt-2\">\n                    <button className=\"btn delete-btn\" onClick={() => this.deleteInspection()}></button>\n                    <button className=\"btn edit-btn\" onClick={() => this.editInspection()}></button>\n                    <button className=\"btn add-btn\" onClick={() => this.addInspection()}></button>\n                    \n                </div>\n\n\n            </div>\n            <div className=\"quote-req-list \">\n                <div className=\"row mt-1 quote-req-header\">\n                    <div className=\"col-sm\">\n                        <label>Inspection Name</label>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label>Inspection Desc</label>\n                    </div>\n                    <div className=\"col-sm\">\n                        <label>Inspection Cost</label>\n                    </div>\n                </div>\n                <div className=\"quote-req-table\">\n                    {this.state.listitems && this.state.listitems.map(listitem => (\n                            <div className=\"row mt-1\" key={listitem.id}>\n                                <div className=\"col-sm\" >\n                                    <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                        <input type=\"radio\" className=\"toggle\"\n                                            name=\"quoteItem\" value={listitem.id}\n                                            onChange={() => this.onInspectionSelected(listitem)} />\n                                        {listitem.name}\n                                    </label>\n\n                                </div>\n                                <div className=\"col-sm\" >\n                                    <label className=\"\">{listitem.desc}</label>\n                                </div>\n                                <div className=\"col-sm\" >\n                                    <label className=\"\">{listitem.cost}</label>\n                                </div>\n                            </div>\n                        ))}\n                </div>\n            </div>\n           \n        </div>);\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {!this.state.editInspectionPage && this.renderInspectionList()}\n                {this.state.editInspectionPage && this.renderEditInspection()}\n                {this.renderTax()}\n                <Popup popupConfig = {this.state.popupConfig} openFlag = {this.state.isPopupOpen} parentCloseCallback={this.handleClose.bind(this)} parentConfirmCallback = {this.handleModalYes.bind(this)}></Popup>\n            </React.Fragment>\n        );\n    }\n}\nexport default ManageInspection;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/auth.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/admin.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Upload.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/user.service.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ForgotPassword.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/EditQuote.js",["229","230","231","232","233","234","235"],"import React, { Component } from 'react';\nimport { Button, Table } from 'reactstrap';\nimport { Accordion, Card } from \"react-bootstrap\";\n\nimport { statusColorClass, headerBtn } from '../common/Utils.js';\nimport Popup from \"../components/Popup\";\nimport TableHeader from \"../components/TableHeader\";\nimport TableRow from \"../components/TableRow\";\n\nimport AdminService from \"../services/admin.service\";\n\nimport { validationMessages } from '../common/Constants';\n\nimport operationJson from '../../data/quoteItem.json';\n\nclass QuoteReqUpdate extends Component {\n  state = {\n    selectedItem: {},\n    open: false,\n    operationsList: [],\n    tagoperationList: [],\n    inspectionsList: [],\n    selectedInspection: '',\n    popupConfig: {},\n    isPopupOpen: false,\n    selectedOperationId: 0,\n    configOpId: 0,\n    totalCost: 0\n  }\n  constructor(props) {\n    super(props);\n    this.getSingleQuote();\n    this.getOperations();\n    this.getInspections();\n  }\n  getOperations = () => {\n    AdminService.getAllOperations().then(\n      response => {\n        if (response) {\n          this.setState({\n            tagoperationList: response.data.rows\n          });\n        }\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n\n  getInspections = () => {\n    AdminService.getAllInspection().then(\n      response => {\n        if (response) {\n          this.setState({\n            inspectionsList: response.data.inspections.rows\n          });\n        }\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n\n  getSingleQuote = () => {\n    AdminService.getSingleQuote(this.props.selectedQuoteId).then(\n      response => {\n        if (response) {\n          this.setState({\n            selectedItem: response.data\n          });\n        }\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  };\n  resetReq() {\n\n  }\n  showAvailableTools(id) {\n    this.setState({\n      configOpId: id,\n      selectedOperationId: id,\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Available Tools\",\n        body: '',\n        type: \"toolsList\"\n      }\n    });\n  }\n  showAvailableWorker(id) {\n    this.setState({\n      configOpId: id,\n      selectedOperationId: id,\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Available Workers\",\n        body: '',\n        type: \"workerList\"\n      }\n    });\n  }\n\n  saveQuoteUpdate() {\n\n\n    var tmptoolobj = [];\n    this.state.operationsList.QuoteOperationInv && this.state.operationsList.QuoteOperationInv.map((item, i) => {\n      var toolobj = {};\n      toolobj[\"invId\"] = item.Inventories.id;\n      toolobj[\"reqQty\"] = parseInt(item.req_quantity);\n      tmptoolobj.push(toolobj);\n    });\n\n\n    var tmpworkerobj = [];\n    this.state.operationsList.QuoteOperationWorker && this.state.operationsList.QuoteOperationWorker.map((item, i) => {\n      var workerobj = {};\n      workerobj[\"workerId\"] = item.Workers.id;\n      workerobj[\"totalHrs\"] = parseInt(item.total_hrs_req);\n      tmpworkerobj.push(workerobj);\n    });\n\n\n    var data = {\n      \"quoteId\": this.state.selectedItem.id,\n      \"status\": this.state.selectedItem.status,\n      \"operations\": [\n        {\n          \"operationId\": this.state.configOpId,\n          \"inspection\": this.state.selectedInspection,\n          \"operation_total_hrs\": this.state.operationsList.operation_total_hrs,\n          \"operation_cost\": this.state.operationsList.operation_cost,\n          \"tools\": tmptoolobj,\n          \"workers\": tmpworkerobj\n        }\n      ]\n    };\n    AdminService.tagQuote(data).then(\n      response => {\n        if(response)\n          this.showPopupMessage(response.data.message);\n        else \n          this.showPopupMessage(\"Something went wrong!\");\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n\n\n  }\n  submitQuoteUpdate() {\n    var data = {\n      \"status\": \"QUOTE_RECEIVED\"\n    };\n    AdminService.changeStatus(this.state.selectedItem.id, data).then(\n      response => {\n        console.log(response);\n        this.showPopupMessage(response.data.message);\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  }\n  changeQuoteStatus(status) {\n    var data = {\n      \"status\": status\n    };\n    AdminService.changeStatus(this.state.selectedItem.id, data).then(\n      response => {\n        console.log(response);\n        this.showPopupMessage(response.msg);\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n  }\n\n  showPopupMessage(message) {\n    this.setState({\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Message\",\n        body: message,\n        type: \"message\"\n      }\n    });\n  }\n\n  handleBreadCrumb() {\n    this.props.parentCallback();\n  }\n  deleteOperation(opId,opName,event) {\ndebugger;\n    this.setState({\n      deleteOpId: opId,\n      isPopupOpen: true,\n      popupConfig : {\n          header: \"Confirm to Delete\",\n          body:validationMessages.DELETE_CONFIRM+opName,\n          type: \"confirmation\"\n      }\n  });\n\n\n  }\n\n  removeTool() {\n    alert(\"Do you want to remove tool\");\n  }\n  handleChange = e => {\n    console.log(e);\n  }\n\n\n\n\n  handleReqAvailChange = event => {\n    let { value, min, max } = event.target;\n    value = Math.max(Number(min), Math.min(Number(max), Number(value)));\n    alert(value);\n    this.setState({ value });\n  }\n\n  handleClose = (list) => {\n\n    if (list && this.state.popupConfig.type === \"configureOperation\") {\n      var obj = this.state.tagoperationList.find(o => o.id == this.state.configOpId);\n      if (obj) {\n        var QuoteOperation = {\n          \"Operations\": {\n            \"id\": obj.id,\n            \"name\": obj.name,\n            \"desc\": obj.desc\n          },\n          \"QuoteOperationInv\": list.tools,\n          \"QuoteOperationWorker\": list.workers,\n          \"operation_cost\": list.totalCost,\n          \"operation_total_hrs\": list.workers.reduce((a, v) => a = parseInt(a) + parseInt(v.total_hrs_req), 0)\n        };\n        var newQuoteOperation = [...this.state.selectedItem.QuoteOperation, QuoteOperation];\n\n        var selectedItem = this.state.selectedItem;\n        selectedItem.QuoteOperation = newQuoteOperation;\n        this.setState({\n          operationsList: QuoteOperation\n        });\n        this.setState({\n          selectedItem\n        });\n      }\n    }\n    else if (list && this.state.popupConfig.type === \"toolsList\") {\n      console.log(this.state);\n      debugger;\n      var obj = this.state.selectedItem.QuoteOperation.find(o => o.Operations.id == this.state.configOpId);\n      if (obj) {\n        console.log(obj.QuoteOperationInv);\n        var newInventryList = [...obj.QuoteOperationInv, list.tools];\n        console.log(newInventryList);\n      }\n    } else if (list && this.state.popupConfig.type === \"operationList\") {\n      /*var tmp = this.state.operationsList;\n      tmp.push(list);\n      this.setState({\n        operationsList: tmp\n      });*/\n    }\n    this.setState({\n      isPopupOpen: false\n    });\n\n  };\n\n  handleModalYes = () => {\n\n    this.setState({\n      isPopupOpen: false\n    });\n\n\n    var tempList = this.state.selectedItem.QuoteOperation.filter(item => item.Operations.id !== this.state.deleteOpId);\n    var tmpSelectedItem = this.state.selectedItem;\n    tmpSelectedItem.QuoteOperation = tempList;\n    this.setState({\n      selectedItem: tmpSelectedItem\n    });\n\n\n\n    /*\n    AdminService.deleteQuote(this.state.selectedItem.id).then(\n      response => {\n        var tempList = this.state.listitems.filter(item => item.id !== this.state.selectedItem.id);\n        this.setState({\n          listitems: tempList,\n          selectedItem: []\n        });\n      },\n      error => {\n        console.log(\"Error\");\n      }\n    );\n    */\n\n\n  };\n\n  handleInspectionChange(event) {\n    this.setState({\n      selectedInspection: event.target.value\n    });\n  };\n\n  handleOperationChange(event) {\n    this.setState({\n      configOpId: event.target.value\n    });\n\n    this.setState({\n      isPopupOpen: true,\n      popupConfig: {\n        header: \"Configure Operations\",\n        body: '',\n        type: \"configureOperation\"\n      }\n    });\n\n  };\n\n\n\n\n  showOperationTools(inventory) {\n\n\n    var tableHeader = [\"inputCheckbox\", \"Tool Name\", \"Available Quantity\", \"Cost\", \"Required Quantity\"];\n    return (\n      <Table responsive=\"sm\">\n        <tbody>\n          <TableHeader\n            headerObj={tableHeader}\n            onCheckboxChange={this.handleChange}\n          />\n          {inventory && inventory.map((tool, i) => {\n            return (<TableRow\n              type=\"tool\"\n              listItem={tool.Inventories}\n              reqQty={tool.req_quantity}\n            />);\n          })\n          }\n        </tbody>\n      </Table>\n    );\n  }\n\n  showOperationWorkers(workers) {\n    var tableHeader = [\"inputCheckbox\", \"Worker Name\", \"Available per Day\", \"Cost per Hour\", \"Required Hour\"];\n    return (\n      <Table responsive=\"sm\">\n        <tbody>\n          <TableHeader\n            headerObj={tableHeader}\n            onCheckboxChange={this.handleChange}\n          />\n          {workers && workers.map((item, i) => {\n            return (<TableRow\n              type=\"worker\"\n              listItem={item.Workers}\n              reqQty={item.total_hrs_req}\n            />);\n          })\n          }\n        </tbody>\n      </Table>\n    );\n\n  }\n  getCost() {\n    if (this.state.selectedItem.QuoteOperation) {\n      return (this.state.selectedItem.QuoteOperation.reduce((a, v) => a = a + v.operation_cost, 0));\n    } else {\n      return (0);\n    }\n\n  };\n\n  renderMeasureTable() {\n    var measures = this.state.selectedItem.Measures;\n    return (<div className=\"quote-data-div\">\n      <span className=\"underline half blue\">Measurements</span>\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <label>Name</label>\n        </div>\n        <div className=\"col\">\n          <label>Unit</label>\n        </div>\n        <div className=\"col\">\n          <label>Quantity</label>\n        </div>\n      </div>\n\n      {measures && measures.map((item, index) => {\n        return (\n          <div className=\"row pb-2 green-text-color\" key={item.id}>\n            <div className=\"col\">\n              <label>{item.name}</label>\n            </div>\n            <div className=\"col\">\n              <label>{item.unit}</label>\n            </div>\n            <div className=\"col\">\n              <label>{item.qty}</label>\n            </div>\n\n          </div>\n        )\n      })\n      }\n    </div>);\n  }\n  removeUploadedImage(file) {\n\n/*\n    const config = {\n        bucketName: 'fuentes-fileupload',\n        dirName: 'quote-attachments',\n        region: 'us-west-1',\n        accessKeyId: 'AKIA5ARA5MYMNVC47U6F',\n        secretAccessKey: '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'\n    }\n   \n   \n    const ReactS3Client = new S3(config);\n\n    const filename = file.fileName;\n\n    ReactS3Client\n        .deleteFile(filename)\n        .then(response => console.log(response))\n        .catch(err => console.error(err))\n\n\n*/\n\n}\n  showUploadImage(filePath) {\n    this.setState({\n        isPopupOpen: true,\n        popupConfig: {\n            header: \"Uploaded Data\",\n            body: filePath,\n            type: \"image\"\n        }\n    });\n}\n\n  render() {\n\n    var userData = {};\n    var uploads = [];\n    if (this.state.selectedItem) {\n      userData = this.state.selectedItem.User;\n      uploads = this.state.selectedItem.Uploads;\n    }\n\n    return (\n      <React.Fragment>\n        <Popup popupConfig={this.state.popupConfig} openFlag={this.state.isPopupOpen} parentCloseCallback={this.handleClose} parentConfirmCallback={this.handleModalYes.bind(this)}></Popup>\n        <div className=\"col admin-quote-page\">\n          <div className=\"list-group-header section-header row\">\n            <div className=\"col-4\">\n\n              <nav aria-label=\"breadcrumb\">\n                <ul className=\"breadcrumb\">\n                  <li key=\"breadcrumb1\" className=\"breadcrumb-item\" onClick={this.handleBreadCrumb.bind(this)}>\n                    <span className=\"mb-1 underline\">Quote</span>\n                    <span className=\"mb-1 blue-color pl-2\">Requests</span>\n                  </li>\n                  <li key=\"breadcrumb2\" className=\"breadcrumb-item active\" aria-current=\"page\">\n                    <span className=\"mb-1\">Update</span>\n                    <span className=\"mb-1 blue-color pl-2\">Quote</span>\n                  </li>\n                </ul>\n              </nav>\n\n            </div>\n\n          \n\n            {headerBtn(this.state.selectedItem.status) > 4 ? ( <div className=\"col-8 text-right\">\n                  <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.changeQuoteStatus(\"QUOTE_REJECTED\")} >Reject</button>\n                  <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.changeQuoteStatus(\"PROJECT_IN_PROGRESS\")}>Accept Purchase Order</button>\n                </div>) : (<div className=\"col-8 text-right\">\n                  <button type=\"button\" className=\"btn btn-blue btn-sm pr-4 pl-4\" onClick={() => this.resetReq()} >Reset</button>\n                  <button type=\"button\" className=\"btn btn-info btn-sm ml-2 pr-4 pl-4\" onClick={() => this.saveQuoteUpdate()}>Save</button>\n                  <button type=\"button\" className=\"btn btn-green btn-sm ml-2 pr-4 pl-4\" onClick={() => this.submitQuoteUpdate()}>Submit</button>\n                </div>)}\n\n\n          </div>\n          <div>\n            <div className=\"blue-box-div row\">\n              <div className=\"col-3 white-border-right\">\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Title</span>\n                  <span className={\"badge p-2 ml-2 float-right \" + statusColorClass(this.state.selectedItem.status)}>{this.state.selectedItem.status}</span>\n                  <p className=\"green-text-color\">{this.state.selectedItem.title}</p>\n                </div>\n\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Description</span>\n                  <p className=\"green-text-color\">{this.state.selectedItem.desc}</p>\n                </div>\n\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Submitted By</span>\n                  <p className=\"green-text-color\">{userData && userData.name}</p>\n                </div>\n\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Submitted On</span>\n                  <p className=\"green-text-color\">{(new Date(this.state.selectedItem.createdAt)).toLocaleDateString()}</p>\n                </div>\n                <div className=\"quote-data-div\">\n                  <span className=\"underline half blue\">Attachments</span>\n\n                  {uploads && uploads.map((item, index) => {\n                                return (\n                                    <div className=\"\">\n                                        <button className=\"btn btn-link p-0\" onClick={() => this.showUploadImage(item.filePath)}>{item.fileName}</button>\n                                        <button class=\"btn remove-btn\" onClick={() => this.removeUploadedImage(item)}></button>\n                                    </div>\n                                )\n                            })\n                            }\n\n                </div>\n                {this.state.selectedItem.Measures &&\n                  this.renderMeasureTable()\n                }\n              </div>\n\n\n              {this.state.selectedItem.status === \"PROJECT_IN_PROGRESS\" || this.state.selectedItem.status === \"QUOTE_PO_SUBMIT\" ?\n                <div className=\"col\">\n                  <div className=\"row\">\n                    <div className=\"purchase-order d-inline-block form-group col\">\n                      <span className=\"underline blue mb-2\">Order details</span>\n                      <div className=\"row ml-2\">\n                        <div className=\"col-md-8\">Operation Cost</div>\n                        <div className=\"col-md-2\">2</div>\n                        <div className=\"col-md-8\">Inspection Amount</div>\n                        <div className=\"col-md-2\">1</div>\n                        <div className=\"col-md-8\">Sub Total</div>\n                        <div className=\"col-md-2\">3</div>\n                        <div className=\"col-md-8\">Total tax</div>\n                        <div className=\"col-md-2\">5%</div>\n                        <div className=\"col-md-8\"></div>\n                        <div className=\"col-md-2\"></div>\n                        <div className=\"col-md-8\">Total Cost</div>\n                        <div className=\"col-md-2\">8</div>\n                      </div>\n\n                    </div>\n\n                    <div className=\"col\">\n                      <span className=\"underline blue mb-2\">Purchase Order</span>\n                      <img src={this.state.selectedItem.submittedPO} className='img-thumbnail' alt='...'></img>\n\n                    </div>\n\n                  </div>\n\n\n                </div>\n                :\n\n                (<div className=\"col quote-measurements\">\n                  <div className=\"row\">\n                    <div className=\"col\">\n                      <span className=\"underline blue\">Make a Quote</span>\n                    </div>\n                    <div className=\"col text-right\">\n\n\n                      <select className=\"form-control btn-green mb-2 mr-2 col-4 d-inline-block\" defaultValue={this.state.selectedItem.InspectionId} onChange={this.handleInspectionChange.bind(this)}>\n                        <option>Add Inspection</option>\n                        {this.state.inspectionsList && this.state.inspectionsList.map((item, index) => (\n                          <option key={item.id} value={item.id}>{item.name}</option>\n                        ))}\n                      </select>\n\n\n                      <select className=\"form-control btn-green mb-2 mr-2 col-4 d-inline-block\" onChange={this.handleOperationChange.bind(this)}>\n                        <option>Tag Operations</option>\n                        {this.state.tagoperationList && this.state.tagoperationList.map((item, index) => (\n                          <option key={item.id} value={item.id}>{item.name}</option>\n                        ))}\n                      </select>\n\n                      <span className=\"blue\">Total Cost</span>\n                      <span className=\"badge btn-blue p-2 ml-2\">{this.getCost()}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"card-header measurements-header row mt-1 font-weight-bold\">\n                    <div className=\"col-sm\">\n                      <label>Operation</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label >Description</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label>Hours</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label>Workers</label>\n                    </div>\n\n                    <div className=\"col-sm\">\n                      <label>Cost</label>\n                    </div>\n                    <div className=\"col-sm\">\n                      <label>Tools</label>\n                    </div>\n\n                  </div>\n\n                  <Accordion>\n\n                    {this.state.selectedItem.QuoteOperation && this.state.selectedItem.QuoteOperation.map((operation, i) => {\n                      return (\n\n                        <Card key={i + \"cardKey\"}>\n                          <Accordion.Toggle as={Card.Header} eventKey={i + \"\"}>\n\n                            <div className=\"row mt-1 green-text-color\">\n                              <div className=\"col-sm\">\n                                <label>{operation.Operations.name}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label className=\"acc-description\">{operation.Operations.desc}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label>{operation.operation_total_hrs}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label>{operation.QuoteOperationWorker && operation.QuoteOperationWorker.length}</label>\n                              </div>\n\n                              <div className=\"col-sm\">\n                                <label>{operation.operation_cost}</label>\n                              </div>\n                              <div className=\"col-sm\">\n                                <label>{operation.QuoteOperationInv && operation.QuoteOperationInv.length}</label>\n                                <button onClick={this.deleteOperation.bind(this,operation.Operations.id,operation.Operations.name)} className=\"btn delete-btn float-right mr-5\" ></button>\n                              </div>\n                            </div>\n\n                          </Accordion.Toggle>\n                          <Accordion.Collapse eventKey={i + \"\"}>\n                            <Card.Body>\n                             {/* \n  <button type=\"button\" className=\"btn btn-blue btn-sm ml-2 pr-4 pl-4\" onClick={() => this.showAvailableTools(operation.Operations.id)}>Add Tools</button>\n    <button type=\"button\" className=\"btn btn-blue btn-sm ml-2 pr-4 pl-4\" onClick={() => this.showAvailableWorker(operation.Operations.id)}>Add Workers</button>\n                                                        \n*/} \n                              {operation.QuoteOperationInv.length > 0 && this.showOperationTools(operation.QuoteOperationInv)}\n                              {operation.QuoteOperationWorker.length > 0 && this.showOperationWorkers(operation.QuoteOperationWorker)}\n                            </Card.Body>\n                          </Accordion.Collapse>\n                        </Card>\n\n                      );\n                    })}\n                  </Accordion>\n\n                </div>)\n              }\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\nexport default QuoteReqUpdate;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/admin/ManageQuote.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/MyAlert.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Popup.js",["236","237"],"import React from 'react';\nimport { Button } from 'reactstrap';\nimport Modal from \"react-bootstrap/Modal\";\nimport ForgotPassword from \"../common/ForgotPassword\";\nimport OperationList from \"../common/OperationList\";\nimport ConfigureOperation from \"../common/ConfigureOperation\";\nimport Profiile from \"../common/Profile\";\n\nclass Popup extends React.Component {\n\n  callback = (list) => {\n    this.props.parentCloseCallback(list);\n  }\n\n  renderPopupBody() {  \n    switch(this.props.popupConfig.type) {\n      case 'forgotPassword':\n        return <ForgotPassword popupClose={this.props.parentCloseCallback}></ForgotPassword>;\n      case 'toolsList':\n        return <ConfigureOperation showTools={true} popupClose={this.callback}></ConfigureOperation>;\n      case 'workerList':\n        return <ConfigureOperation showWorkers={true} popupClose={this.callback}></ConfigureOperation>;\n      case 'configureOperation':\n        return <ConfigureOperation showTools={true} showWorkers={true} popupClose={this.callback}></ConfigureOperation>;\n      case 'operationList':\n        return <OperationList popupClose={this.callback}></OperationList>;\n      case 'image':\n        return <div class=\"container\"> \n  <iframe class=\"responsive-iframe\"  src={this.props.popupConfig.body}></iframe>\n</div>\n  ;\n      case 'profile':\n          return <Profiile></Profiile> ;\n        default:\n        return this.props.popupConfig.body;\n    }\n  };\n\n  render() {\n    const popupConfigType = this.props.popupConfig.type;\n    let button;\n    if (popupConfigType === \"confirmation\") {\n      button = <Button color=\"success\" onClick={this.props.parentConfirmCallback}>Confirm Delete</Button>;\n    } \n    return (\n      <Modal show={this.props.openFlag} onHide={this.props.parentCloseCallback} className={\" \" + (this.props.popupConfig.type == 'image' ? \"imgCntr\":\"\")} >\n        <Modal.Header closeButton>\n          <Modal.Title>{this.props.popupConfig.header}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n        { this.renderPopupBody() }\n        </Modal.Body>\n        <Modal.Footer>\n          {button}\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\nexport default Popup;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Sidebar.js",["238"],"import React, { Component } from 'react';\nclass Sidebar extends Component {\n\n    \n    constructor(props) {\n        super(props); \n        this.state = {\n            activeLink: 1,\n            leftMenu: []\n        } \n        this.selectMenu();\n    }\n    selectMenu() {\n        var adminFlag = JSON.parse(localStorage.getItem('user')).admin;\n        var menu = [];\n        if (adminFlag) {\n            menu = [\n                {\n                    id: 1,\n                    name: \"Quotes\",\n                    className: \"nav-quote-req\" \n                },\n                {\n                    id: 2,\n                    name: \"Projects \",\n                    className: \"nav-projects \"\n                },\n                {\n                    id: 3,\n                    name: \"Operations\",\n                    className: \"nav-operations\"\n                },\n                {\n                    id: 4,\n                    name: \"Inventory\",\n                    className: \"nav-inventory\"\n                },\n                {\n                    id: 5,\n                    name: \"Worker\",\n                    className: \"nav-workers\"\n                },\n                {\n                    id: 6,\n                    name: \"Customer\",\n                    className: \"nav-customer\"\n                },\n                {\n                    id: 7,\n                    name: \"Inspection\",\n                    className: \"nav-inspection\"\n                }\n            ];\n           \n        } else {\n             menu = [\n                {\n                    id: 1,\n                    name: \"Projects \",\n                    className: \"nav-projects \"\n                },\n                {\n                    id: 2,\n                    name: \"Operations\",\n                    className: \"nav-operations\"\n                },\n                {\n                    id: 3,\n                    name: \"Schedule\",\n                    className: \"nav-schedule\"\n                }\n            ];\n        }\n        this.state.leftMenu = menu\n    }\n    selectMenuItem(id) {\n        this.setState({ activeLink: id });\n        this.props.onClick(id);\n    }\n\n\n    render() {\n        \n        const { leftMenu, activeLink } = this.state;\n        return (\n            <React.Fragment>\n\n                    <div className=\"sidebar-div\">\n                        <ul className=\"nav flex-column\">\n                            {leftMenu && leftMenu.map(item => {\n                                return (\n                                    <li className={\n                                        item.className +\n                                        (item.id === activeLink ? \" nav-item active_item\" : \" nav-item\")\n                                      } key = {item.id}>\n                                        <p className=\"nav-link\" data-toggle=\"tab\" onClick={(e) => this.selectMenuItem(item.id)} >\n                                            <span>{item.name}</span>\n                                        </p>\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                    \n                \n            </React.Fragment>\n        );\n    }\n}\nexport default Sidebar;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerDashboard.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerOperations.js",["239"],"import React, { Component } from 'react';\n\nimport jsonData from \"../../data/operationsData.json\";\nimport AdminService from \"../services/admin.service\";\n\nclass WorkerOperations extends Component {\n    state = {\n        searchValue: \"\",\n        listitems: jsonData.operationsList,\n        selectedItem: [],\n        editOperationPage: false\n    }\n    constructor(props) {\n        super(props);\n        //this.getAllOperationList();\n    }\n    getAllOperationList() {\n        AdminService.getAllOperations().then(\n            response => {\n                this.setState({\n                    listitems: response.data.operations\n                });\n            },\n            error => {\n              console.log(\"Error\");\n            }\n          );\n    }\n    handleSearchChange(e) {\n        this.setState({\n            searchValue: e.target.value.toLowerCase()\n        });\n    }\n   \n    onOperationSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    parentCallback = () => {\n        this.setState({\n            selectedItem: []\n        });\n        this.setState({\n            editOperationPage:false\n          });\n    }\n    renderOperationsList() {\n        return(\n            <div className=\"col admin-list-page\" id=\"operations-page\">\n                    <div className=\"list-group-header section-header row\">\n\n                        <div className=\"col-4\">\n                            <span className=\"mb-1 underline\">Manage</span>\n                            <span className=\"mb-1 blue-color pl-2\">Operations</span>\n                        </div>\n\n                        <div className=\"col-8 text-right\">\n                            <div className=\"has-search\">\n                                <span className=\"fa fa-search form-control-feedback\"></span>\n                                <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search quote requests...\" onChange={this.handleSearchChange.bind(this)} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"quote-req-list\">\n                        <div className=\"row mt-1 quote-req-header\">\n                            <div className=\"col-sm\">\n                                <label>Operation Name</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Description</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Start Date</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>End Date</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Commited</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Left</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Status</label>\n                            </div>\n                        </div>\n                        <div className=\"quote-req-table\">\n\n                           {this.state.listitems.filter(item =>\n                                item.o_name.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                                    <div className=\"row mt-1\" key={listitem.id}>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                                <input type=\"radio\" className=\"toggle\"\n                                                    name=\"operationItem\" value={listitem.id}\n                                                    onChange={() => this.onOperationSelected(listitem)} />\n                                                {listitem.o_name}\n                                            </label>\n                                            \n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"description-truncate text-truncate\">{listitem.o_desc}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.createdAt}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.updatedAt}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hoursCommited}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hoursLeft}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.status}</label>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderOperationsList()}\n            </React.Fragment>\n        );\n    }\n}\nexport default WorkerOperations;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerProjects.js",["240"],"import React, { Component } from 'react';\nimport {statusColorClass} from '../common/Utils.js';\n\nimport AdminService from \"../services/admin.service\";\n\nimport jsonData from \"../../data/projectData.json\";\n\nclass WorkerProjects extends Component {\n    state = {\n        searchValue: \"\",\n        listitems: jsonData.projects,\n        selectedItem: [],\n        editProjectPage: false\n    }\n    constructor(props) {\n        super(props);\n        //this.getAllProjectList();\n    }\n    getAllProjectList() {\n        AdminService.getAllProjects().then(\n            response => {\n                this.setState({\n                    listitems: response.data.projects\n                });\n            },\n            error => {\n              console.log(\"Error\");\n            }\n          );\n          \n    }\n    handleSearchChange(e) {\n        this.setState({\n            searchValue: e.target.value.toLowerCase()\n        });\n    }\n    \n    onProjectSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    parentCallback = () => {\n        this.setState({\n            selectedItem: []\n        });\n        this.setState({\n            editProjectPage:false\n          });\n    }\n    renderProjectList() {\n        return(\n            <div className=\"col admin-list-page\" id=\"projects-page\">\n                    <div className=\"list-group-header section-header row\">\n\n                        <div className=\"col-4\">\n                            <span className=\"mb-1 underline\">Manage</span>\n                            <span className=\"mb-1 blue-color pl-2\">Projects</span>\n                        </div>\n\n                        <div className=\"col-8 text-right\">\n                            <div className=\"has-search\">\n                                <span className=\"fa fa-search form-control-feedback\"></span>\n                                <input type=\"text\" className=\"form-control search-box\" placeholder=\"Search projects...\" onChange={this.handleSearchChange.bind(this)} />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"quote-req-list\">\n                        <div className=\"row mt-1 quote-req-header\">\n                            <div className=\"col-sm\">\n                                <label>Project Name</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Description</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Commited</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Hours Left</label>\n                            </div>\n\n                            <div className=\"col-sm\">\n                                <label>Start Date</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>End Date</label>\n                            </div>\n                            \n                            \n                            <div className=\"col-sm\">\n                                <label>Status</label>\n                            </div>\n                        </div>\n                        <div className=\"quote-req-table\">\n                        \n                            {this.state.listitems.filter(item =>\n                                item.p_name.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                                    <div className=\"row mt-1\" key={listitem.id}>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                                <input type=\"radio\" className=\"toggle\"\n                                                    name=\"projectItem\" value={listitem.id}\n                                                    onChange={() => this.onProjectSelected(listitem)} />\n                                                {listitem.p_name}\n                                            </label>\n                                            \n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"description-truncate text-truncate\">{listitem.p_desc}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hours_commited}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{listitem.hours_left}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{(new Date(listitem.start_date)).toLocaleDateString()}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label>{(new Date(listitem.end_date)).toLocaleDateString()}</label>\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className = {\"badge \" + statusColorClass(listitem.p_status)} >{listitem.p_status}</label>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                    </div>\n                </div>\n        );\n    }\n    render() {\n        return (\n            <React.Fragment>\n                {this.renderProjectList()}\n            </React.Fragment>\n        );\n    }\n}\nexport default WorkerProjects;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/worker/WorkerTimesheet.js",["241"],"\nimport React, { Component } from 'react';\n\nimport { ScheduleComponent, Day, Week, WorkWeek, Month, Agenda, Inject } from '@syncfusion/ej2-react-schedule';\n\nclass WorkerSchedule extends Component {\n    state = {\n       \n    }\n    constructor(props) {\n        super(props);\n        \n    }\n    render() {\n        return (\n            <div className=\"col admin-list-page\" id=\"operations-page\">\n            <ScheduleComponent>\n    <Inject services={[Day, Week, WorkWeek, Month, Agenda]}/>\n</ScheduleComponent>\n</div>\n        );\n    }\n}\nexport default WorkerSchedule;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ToolsList.js",[],["242","243"],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/Checkbox.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/OperationList.js",["244"],"import React, { Component } from 'react';\n\nimport AdminService from \"../services/admin.service\";\n\nimport Checkbox from \"../components/Checkbox\";\n\nclass OperationList extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            listitems: [],\n            searchValue: \"\"\n        }\n        this.getAllOperationList();\n    }\n\n    getAllOperationList() {\n        AdminService.getAllOperations().then(\n            response => {\n                console.log(response);\n                debugger;\n                this.setState({\n                    listitems: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n    onTagOperationSelectedSave() {\n        this.props.popupClose(this.state.selectedItem);\n    }\n\n    onOperationSelected(selectedItem) {\n        this.setState({\n            selectedItem: selectedItem\n        });\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"admin-list-page\">\n                    <div className=\"quote-req-list\">\n                        <div className=\"row mt-1 quote-req-header\">\n                            <div className=\"col-sm\">\n                                <label>Operation Name</label>\n                            </div>\n                            <div className=\"col-sm\">\n                                <label>Description</label>\n                            </div>\n\n                        </div>\n\n                        <div className=\"quote-req-table\">\n                            {this.state.listitems && this.state.listitems.filter(item =>\n                                item.name.toLowerCase().includes(this.state.searchValue)).map(listitem => (\n\n                                    <div className=\"row mt-1\" key={listitem.id}>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"btn btn-default blue projectname-truncate text-truncate\">\n                                                <input type=\"radio\" className=\"toggle\"\n                                                    name=\"operationItem\" value={listitem.id}\n                                                    onChange={() => this.onOperationSelected(listitem)} />\n                                                {listitem.name}\n                                            </label>\n\n                                        </div>\n                                        <div className=\"col-sm\" >\n                                            <label className=\"description-truncate text-truncate\">{listitem.desc}</label>\n                                        </div>\n                                    </div>\n                                ))}\n                        </div>\n                        <button onClick={() => this.onTagOperationSelectedSave()} className=\"btn btn-success btn-sm\" >Save</button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n\n    }\n}\nexport default OperationList;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/ConfigureOperation.js",["245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264"],"import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\n\nimport Checkbox from \"../components/Checkbox\";\nimport TableRow from \"../components/TableRow\";\nimport TableHeader from \"../components/TableHeader\";\nimport AdminService from \"../services/admin.service\";\nimport MyAlert from \"../components/MyAlert\";\n\nclass ConfigureOperation extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            listitems: [],\n            toolList: [],\n            workerList: [],\n            searchValue: \"\",\n            selectedToolList: [],\n            selectedWorkerList: [],\n            showAlert: false,\n            alertConfig: {\n                \"variant\": \"danger\"\n            },\n            totalCost: 0\n        }    \n        this.getData();\n    }\n\n    getData() {\n        if(this.props.showTools) {\n            this.getAllTools();\n        }\n        if(this.props.showWorkers) {\n            this.getAllWorkers();\n        }\n    }\n\n    getAllTools() {\n        AdminService.getAllInventory().then(\n            response => {\n                this.setState({\n                    toolList: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    getAllWorkers() {\n        AdminService.getAllWorkers().then(\n            response => {\n                this.setState({\n                    workerList: response.data.rows\n                });\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        );\n    }\n\n    showAlertMessage(msg) {\n        this.setState(prevState => ({\n            alertConfig: { \n                ...prevState.alertConfig,\n                message: msg\n            },\n            showAlert: true \n        }))\n    }\n\n    handleCheckboxChange = changeEvent => {\n        const { name } = changeEvent.target;\n        let obj =[]; obj[\"Inventories\"] = this.state.toolList.find(o => o.id == name);\n        obj[\"req_quantity\"] = this.state.toolList.find(o => o.id == name).req_quantity;\n\n        if(!this.state.toolList.find(o => o.id == name).req_quantity){\n            this.showAlertMessage(\"Please add required quantity\");\n            changeEvent.target.checked = false;\n        }\n        else {\n            \n            this.setState({\n                showAlert: false\n            });\n            if (changeEvent.target.checked) {\n                this.state.selectedToolList.push(obj);\n                var tmpCost = this.state.totalCost + (obj.Inventories.cost * obj.Inventories.req_quantity);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            } else {\n                let tmpObj = this.state.selectedToolList.filter(item => item.id !== name);\n                this.state.selectedToolList = tmpObj;\n                var tmpCost = this.state.totalCost - (obj.Inventories.cost * obj.Inventories.req_quantity);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            }\n        }\n    };\n\n    handleWorkerCheckboxChange = changeEvent => {\n\n        const { name } = changeEvent.target;\n        let obj =[]; obj[\"Workers\"]= this.state.workerList.find(item => item.id == name);\n        obj[\"total_hrs_req\"] = this.state.workerList.find(item => item.id == name).total_hrs_req;\n\n        if(!this.state.workerList.find(o => o.id == name).total_hrs_req){\n            this.showAlertMessage(\"Please add required hours\");\n            changeEvent.target.checked = false;\n        }\n        else {\n            this.setState({\n                showAlert: false\n            });\n\n            if (changeEvent.target.checked) {\n                this.state.selectedWorkerList.push(obj)\n                var tmpCost = this.state.totalCost + (obj.Workers.cost_per_hr * obj.Workers.total_hrs_req);\n                this.setState({\n                    totalCost: tmpCost\n                });\n\n            } else {\n                let tmpObj = this.state.selectedWorkerList.filter(item => item.id != name);\n                this.state.selectedWorkerList = tmpObj;\n                var tmpCost = this.state.totalCost - (obj.Workers.cost_per_hr * obj.Workers.total_hrs_req);\n                this.setState({\n                    totalCost: tmpCost\n                });\n            }\n        }\n    };\n\n    reqQntyChange = changeEvent => {\n        const { name } = changeEvent.target;\n        let obj =[]; obj = this.state.toolList;\n        let sObj = []; sObj = this.state.selectedToolList;\n        if(obj.find(o => o.id == name)) {\n            obj.find(o => o.id == name)['req_quantity'] = changeEvent.target.value;\n        }\n        if(sObj.find(o => o.Inventories.id == name)) {\n            sObj.find(o => o.Inventories.id == name)['req_quantity'] = changeEvent.target.value;\n        }\n        this.setState({\n            toolList: obj,\n            selectedToolList: sObj\n        });\n    };\n    reqHourChange = changeEvent => {\n        const { name } = changeEvent.target;\n        \n        let obj =[]; obj = this.state.workerList;\n        let sObj = []; sObj = this.state.selectedWorkerList;\n        if(obj.find(o => o.id == name)) {\n            obj.find(o => o.id == name)['total_hrs_req'] = changeEvent.target.value;\n        }\n        if(sObj.find(o => o.Workers.id == name)) {\n            sObj.find(o => o.Workers.id == name)['total_hrs_req'] = changeEvent.target.value;\n        }\n        this.setState({\n            workerList: obj,\n            selectedWorkerList: sObj\n        }); \n    };\n\n    createToolRow = option => (\n        <TableRow\n            type=\"tool\"\n            listItem={option}\n            onCheckboxChange={this.handleCheckboxChange}\n            onreqQntyChange = {this.reqQntyChange}\n        />\n    );\n\n    createWorkerCheckbox = option => (\n        <TableRow\n            type=\"worker\"\n            listItem={option}\n            onCheckboxChange={this.handleWorkerCheckboxChange}\n            onreqQntyChange = {this.reqHourChange}\n        />\n    );\n    createTableHeader = (type) => {\n        var tableHeader = [];\n        if (type === \"tool\") {\n            tableHeader = [\"inputCheckbox\", \"Tool Name\", \"Available Quantity\", \"Required Quantity\", \"Cost\"];\n            return (\n                <TableHeader\n                    headerObj={tableHeader}\n                    onCheckboxChange={this.handleCheckboxChange}\n                />\n            );\n        } else if (\"worker\") {\n            tableHeader = [\"inputCheckbox\", \"Worker Name\", \"Available per Day\", \"Cost per Hour\", \"Required Hours\"];\n            return (\n                <TableHeader\n                    headerObj={tableHeader}\n                    onCheckboxChange={this.handleWorkerCheckboxChange}\n                />\n            );\n        }\n    };\n    createToolList = () => (\n        this.state.toolList.filter(item => item.itemName.toLowerCase().includes(this.state.searchValue)).map(this.createToolRow)\n    );\n    createWorkerList = () => (\n        this.state.workerList.filter(item => item.name.toLowerCase().includes(this.state.searchValue)).map(this.createWorkerCheckbox)\n    );\n    saveConfigOperation(e) {\n        var selectedObj = {};\n        selectedObj['tools'] = this.state.selectedToolList;\n        selectedObj['workers'] = this.state.selectedWorkerList;\n        selectedObj['totalCost'] = this.state.totalCost;\n        this.props.popupClose(selectedObj);\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                \n                {this.props.showTools && <div>\n                    <span className=\"underline blue\">Add Tools</span>\n                    <Table responsive=\"sm\">\n                        <tbody>\n                            {this.createTableHeader(\"tool\")}\n                            {this.createToolList()}\n                        </tbody>\n                    </Table>\n                    </div>\n                }\n                {this.props.showWorkers && \n                <div>\n                    <span className=\"underline blue\">Add Worker</span>\n\n                    <Table responsive=\"sm\">\n                        <tbody>\n                            {this.createTableHeader(\"worker\")}\n                            {this.createWorkerList()}\n                        </tbody>\n                    </Table>\n\n                </div>\n                }\n                <button onClick={this.saveConfigOperation.bind(this)} className=\"btn btn-success btn-sm\" > Save </button>\n\n                {this.state.showAlert && < MyAlert alertConfig = {this.state.alertConfig} showAlert={this.state.showAlert} /> }\n\n            </React.Fragment>\n        );\n\n    }\n}\nexport default ConfigureOperation;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableRow.js",[],"/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/components/TableHeader.js",["265"],"import React from \"react\";\n\nconst TableHeader = ({ headerObj, onCheckboxChange }) => {\n\n  return (\n    <tr className=\"green-text-color2\" key=\"tableHeade\">\n      {headerObj && headerObj.map((item, i) => {\n          if (item == \"inputCheckbox\") {\n            return (\n              <th key=\"0\" >\n                <input type=\"checkbox\" name=\"selectAllTools\" />\n              </th>\n            )\n          } else {\n            return (\n              <th key={item}>{item}</th>\n            )\n          }\n        }\n      )}\n    </tr>\n  );\n}\n\nexport default TableHeader;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/common/Profile.js",["266","267","268"],"import React, { Component } from 'react';\nimport { Button, Card, CardBody, CardGroup, Col, Form, Input, InputGroup, Row } from \"reactstrap\";\nimport WorkerService from \"../services/worker.service\";\n\nclass Profile extends Component {\n    state = {\n        item:{}\n    }\n    handleChange(propertyName, event) {\n        var item = this.state.item;\n        item[propertyName] = event.target.value;\n        this.setState({ item: item });\n    }\n    saveProfile() {\n        var data = this.state.item;\n       console.log(data);\n       /* WorkerService.updateWorkerProfile(id, data).then(\n            response => {\n                console.log(response);\n            },\n            error => {\n                console.log(\"Error\");\n            }\n        ); \n        */\n    }\n    render() {\n        return (\n            <React.Fragment>\n\n                <CardGroup>\n                    <Card className=\"p-2\">\n                        <CardBody>\n                            <Form>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Enter Name\" onChange={this.handleChange.bind(this, 'name')} />\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Enter Phone Number\" onChange={this.handleChange.bind(this, 'phone')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Enter Address\" onChange={this.handleChange.bind(this, 'address')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Enter Email\" onChange={this.handleChange.bind(this, 'email')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Availability per day\" onChange={this.handleChange.bind(this, 'avail_per_day')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Cost per hour\" onChange={this.handleChange.bind(this, 'cost_per_hr')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3\">\n                                    <Input type=\"text\" placeholder=\"Profession\" onChange={this.handleChange.bind(this, 'professionId')}/>\n                                </InputGroup>\n                                <InputGroup className=\"mb-3 justify-content-center\">\n                                    <Button color=\"success\"  onClick={() => this.saveProfile()}>Save</Button>\n                                </InputGroup>\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </CardGroup>\n\n            </React.Fragment>\n        );\n    }\n}\nexport default Profile;","/Users/anoopkollengot/Documents/myWorkspace/fluentes_machine_app/src/js/services/worker.service.js",[],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":111,"column":40,"nodeType":"275","messageId":"276","endLine":111,"endColumn":42},{"ruleId":"273","severity":1,"message":"277","line":131,"column":69,"nodeType":"275","messageId":"276","endLine":131,"endColumn":71},{"ruleId":"278","severity":1,"message":"279","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":16},{"ruleId":"278","severity":1,"message":"282","line":6,"column":10,"nodeType":"280","messageId":"281","endLine":6,"endColumn":16},{"ruleId":"278","severity":1,"message":"283","line":6,"column":18,"nodeType":"280","messageId":"281","endLine":6,"endColumn":29},{"ruleId":"284","severity":1,"message":"285","line":16,"column":5,"nodeType":"286","messageId":"287","endLine":18,"endColumn":6},{"ruleId":"288","severity":1,"message":"289","line":61,"column":33,"nodeType":"290","endLine":61,"endColumn":97},{"ruleId":"288","severity":1,"message":"289","line":68,"column":29,"nodeType":"290","endLine":71,"endColumn":128},{"ruleId":"273","severity":1,"message":"274","line":45,"column":40,"nodeType":"275","messageId":"276","endLine":45,"endColumn":42},{"ruleId":"273","severity":1,"message":"277","line":96,"column":77,"nodeType":"275","messageId":"276","endLine":96,"endColumn":79},{"ruleId":"273","severity":1,"message":"274","line":407,"column":55,"nodeType":"275","messageId":"276","endLine":407,"endColumn":57},{"ruleId":"273","severity":1,"message":"274","line":437,"column":67,"nodeType":"275","messageId":"276","endLine":437,"endColumn":69},{"ruleId":"273","severity":1,"message":"274","line":68,"column":64,"nodeType":"275","messageId":"276","endLine":68,"endColumn":66},{"ruleId":"291","severity":1,"message":"292","line":96,"column":17,"nodeType":"293","endLine":96,"endColumn":40},{"ruleId":"294","severity":1,"message":"295","line":101,"column":21,"nodeType":"280","messageId":"296","endLine":101,"endColumn":38},{"ruleId":"291","severity":1,"message":"292","line":106,"column":17,"nodeType":"293","endLine":106,"endColumn":40},{"ruleId":"297","severity":1,"message":"298","line":138,"column":56,"nodeType":"299","messageId":"300","endLine":138,"endColumn":58},{"ruleId":"297","severity":1,"message":"298","line":148,"column":60,"nodeType":"299","messageId":"300","endLine":148,"endColumn":62},{"ruleId":"273","severity":1,"message":"277","line":165,"column":32,"nodeType":"275","messageId":"276","endLine":165,"endColumn":34},{"ruleId":"291","severity":1,"message":"292","line":97,"column":9,"nodeType":"293","endLine":97,"endColumn":19},{"ruleId":"273","severity":1,"message":"274","line":97,"column":74,"nodeType":"275","messageId":"276","endLine":97,"endColumn":76},{"ruleId":"291","severity":1,"message":"292","line":101,"column":13,"nodeType":"293","endLine":101,"endColumn":38},{"ruleId":"294","severity":1,"message":"301","line":157,"column":17,"nodeType":"280","messageId":"296","endLine":157,"endColumn":21},{"ruleId":"278","severity":1,"message":"282","line":2,"column":10,"nodeType":"280","messageId":"281","endLine":2,"endColumn":16},{"ruleId":"278","severity":1,"message":"302","line":14,"column":8,"nodeType":"280","messageId":"281","endLine":14,"endColumn":21},{"ruleId":"297","severity":1,"message":"298","line":112,"column":110,"nodeType":"299","messageId":"300","endLine":112,"endColumn":112},{"ruleId":"297","severity":1,"message":"298","line":121,"column":116,"nodeType":"299","messageId":"300","endLine":121,"endColumn":118},{"ruleId":"273","severity":1,"message":"274","line":235,"column":60,"nodeType":"275","messageId":"276","endLine":235,"endColumn":62},{"ruleId":"294","severity":1,"message":"303","line":263,"column":11,"nodeType":"280","messageId":"296","endLine":263,"endColumn":14},{"ruleId":"273","severity":1,"message":"274","line":263,"column":82,"nodeType":"275","messageId":"276","endLine":263,"endColumn":84},{"ruleId":"304","severity":1,"message":"305","line":29,"column":3,"nodeType":"290","endLine":29,"endColumn":72},{"ruleId":"273","severity":1,"message":"274","line":46,"column":127,"nodeType":"275","messageId":"276","endLine":46,"endColumn":129},{"ruleId":"291","severity":1,"message":"292","line":74,"column":9,"nodeType":"293","endLine":74,"endColumn":19},{"ruleId":"284","severity":1,"message":"285","line":13,"column":5,"nodeType":"286","messageId":"287","endLine":16,"endColumn":6},{"ruleId":"284","severity":1,"message":"285","line":15,"column":5,"nodeType":"286","messageId":"287","endLine":18,"endColumn":6},{"ruleId":"284","severity":1,"message":"285","line":10,"column":5,"nodeType":"286","messageId":"287","endLine":13,"endColumn":6},{"ruleId":"269","replacedBy":"306"},{"ruleId":"271","replacedBy":"307"},{"ruleId":"278","severity":1,"message":"308","line":5,"column":8,"nodeType":"280","messageId":"281","endLine":5,"endColumn":16},{"ruleId":"278","severity":1,"message":"308","line":4,"column":8,"nodeType":"280","messageId":"281","endLine":4,"endColumn":16},{"ruleId":"273","severity":1,"message":"274","line":77,"column":78,"nodeType":"275","messageId":"276","endLine":77,"endColumn":80},{"ruleId":"273","severity":1,"message":"274","line":78,"column":66,"nodeType":"275","messageId":"276","endLine":78,"endColumn":68},{"ruleId":"273","severity":1,"message":"274","line":80,"column":48,"nodeType":"275","messageId":"276","endLine":80,"endColumn":50},{"ruleId":"291","severity":1,"message":"292","line":97,"column":17,"nodeType":"293","endLine":97,"endColumn":27},{"ruleId":"294","severity":1,"message":"309","line":98,"column":21,"nodeType":"280","messageId":"296","endLine":98,"endColumn":28},{"ruleId":"273","severity":1,"message":"274","line":109,"column":81,"nodeType":"275","messageId":"276","endLine":109,"endColumn":83},{"ruleId":"273","severity":1,"message":"274","line":110,"column":75,"nodeType":"275","messageId":"276","endLine":110,"endColumn":77},{"ruleId":"273","severity":1,"message":"274","line":112,"column":50,"nodeType":"275","messageId":"276","endLine":112,"endColumn":52},{"ruleId":"273","severity":1,"message":"277","line":129,"column":83,"nodeType":"275","messageId":"276","endLine":129,"endColumn":85},{"ruleId":"291","severity":1,"message":"292","line":130,"column":17,"nodeType":"293","endLine":130,"endColumn":27},{"ruleId":"294","severity":1,"message":"309","line":131,"column":21,"nodeType":"280","messageId":"296","endLine":131,"endColumn":28},{"ruleId":"273","severity":1,"message":"274","line":143,"column":31,"nodeType":"275","messageId":"276","endLine":143,"endColumn":33},{"ruleId":"273","severity":1,"message":"274","line":144,"column":32,"nodeType":"275","messageId":"276","endLine":144,"endColumn":34},{"ruleId":"273","severity":1,"message":"274","line":146,"column":44,"nodeType":"275","messageId":"276","endLine":146,"endColumn":46},{"ruleId":"273","severity":1,"message":"274","line":147,"column":45,"nodeType":"275","messageId":"276","endLine":147,"endColumn":47},{"ruleId":"273","severity":1,"message":"274","line":159,"column":31,"nodeType":"275","messageId":"276","endLine":159,"endColumn":33},{"ruleId":"273","severity":1,"message":"274","line":160,"column":32,"nodeType":"275","messageId":"276","endLine":160,"endColumn":34},{"ruleId":"273","severity":1,"message":"274","line":162,"column":40,"nodeType":"275","messageId":"276","endLine":162,"endColumn":42},{"ruleId":"273","severity":1,"message":"274","line":163,"column":41,"nodeType":"275","messageId":"276","endLine":163,"endColumn":43},{"ruleId":"273","severity":1,"message":"274","line":8,"column":20,"nodeType":"275","messageId":"276","endLine":8,"endColumn":22},{"ruleId":"278","severity":1,"message":"310","line":2,"column":45,"nodeType":"280","messageId":"281","endLine":2,"endColumn":48},{"ruleId":"278","severity":1,"message":"311","line":2,"column":75,"nodeType":"280","messageId":"281","endLine":2,"endColumn":78},{"ruleId":"278","severity":1,"message":"312","line":3,"column":8,"nodeType":"280","messageId":"281","endLine":3,"endColumn":21},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'ButtonGroup' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-redeclare","'selectedOperation' is already defined.","redeclared","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'data' is already defined.","'operationJson' is defined but never used.","'obj' is already defined.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",["313"],["314"],"'Checkbox' is defined but never used.","'tmpCost' is already defined.","'Col' is defined but never used.","'Row' is defined but never used.","'WorkerService' is defined but never used.","no-global-assign","no-unsafe-negation"]